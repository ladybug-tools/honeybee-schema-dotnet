name: CD

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  buildCSharp:
    name: Build release CSharp
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Update Assembly Version
        shell: bash
        run: |
          cd ./.nswag-generator
          dotnet run --genCsModel --genCsInterface --updateVersion
          MSG=$(dotnet run --updateVersion | grep "New version")
          VERSION=$(echo $MSG | awk -F': ' '{print $2}')
          echo "ReleaseVersion $VERSION"
          echo "ReleaseVersion=$VERSION" >> $GITHUB_ENV

      - name: Create key pair for signing the assembly
        if: github.ref == 'refs/heads/master'
        working-directory: src/HoneybeeSchema
        run: |
          "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\sn.exe" -k HoneybeeSchema.snk
          ls
        shell: cmd

      - name: Build
        run: |
          dotnet restore
          dotnet build --configuration Release

      - name: Run Unit Tests
        working-directory: src/HoneybeeSchema.Tests
        run: dotnet test --configuration Release

      - name: Release CSharp
        working-directory: src/HoneybeeSchema
        run: dotnet pack --configuration Release --output ./../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nugetPackage
          path: ./*.nupkg

    outputs:
      tag: ${{ env.ReleaseVersion }}

  buildTypeScript:
    name: Build release TypeScript
    runs-on: ubuntu-latest
    env:
      CI: ""

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: generate files
        run: |
          cd ./.nswag-generator
          dotnet run --genTsModel --updateVersion

      - name: Install dependencies
        working-directory: src/TypeScriptSDK
        run: npm i

      - name: Build module
        working-directory: src/TypeScriptSDK
        run: npm run build

      - name: Pack package
        working-directory: src/TypeScriptSDK
        run: |
          npm pack
          cp ./*.tgz ./../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: npmPackage
          path: ./*.tgz

  release:
    name: both CSharp and TypeScript SDK
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [buildCSharp, buildTypeScript]

    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Download artifact - nuget
        uses: actions/download-artifact@v4
        with:
          name: nugetPackage

      - name: Download artifact - npm
        uses: actions/download-artifact@v4
        with:
          name: npmPackage

      - name: Release CSharp
        run: dotnet nuget push ./*.nupkg -k ${{secrets.NUGET_API_KEY}} -s https://api.nuget.org/v3/index.json

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish ./*.tgz --access public

  updateDownstremRepo:
    name: Update dependencies
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [release]

    steps:
      - name: Wait for NuGet package to be available
        shell: bash
        run: |
          PACKAGE_NAME="HoneybeeSchema"
          PACKAGE_VERSION="${{ needs.build.outputs.tag }}"
          MAX_ATTEMPTS=30
          SLEEP_TIME=60

          for ((i=1;i<=MAX_ATTEMPTS;i++)); do
            echo "Checking for package $PACKAGE_NAME version $PACKAGE_VERSION (Attempt $i/$MAX_ATTEMPTS)..."
            if dotnet nuget search $PACKAGE_NAME --source https://api.nuget.org/v3/index.json --prerelease --include-delisted | grep $PACKAGE_VERSION; then
              echo "Package $PACKAGE_NAME version $PACKAGE_VERSION is available!"
              exit 0
            fi
            echo "Package not available yet. Sleeping for $SLEEP_TIME seconds..."
            sleep $SLEEP_TIME
          done

          echo "Package $PACKAGE_NAME version $PACKAGE_VERSION was not found after $MAX_ATTEMPTS attempts."
          exit 1

      - name: Update dragonfly-schema-dotnet
        env:
          DISPATCH_REPO: ladybug-tools/dragonfly-schema-dotnet
          DEPS_TOKEN: ${{ secrets.DEPS_UPDATING }}
          VERSION: ${{ needs.build.outputs.tag }}
        run: |
          echo ${VERSION}
          curl -X POST https://api.github.com/repos/$DISPATCH_REPO/dispatches \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -d '{"event_type": "honeybee_schema_dotnet_release", "client_payload": {"version": "${{ needs.build.outputs.tag }}"}}' \
          -u ladybugbot:$DEPS_TOKEN
