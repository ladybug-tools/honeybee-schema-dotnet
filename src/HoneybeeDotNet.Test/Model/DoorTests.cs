/* 
 * Honeybee Model Schema
 *
 * This is the documentation for Honeybee model schema.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;

using HoneybeeDotNet;
using System.Reflection;
using Newtonsoft.Json;

namespace HoneybeeDotNet.Test
{
    /// <summary>
    ///  Class for testing Door
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class DoorTests
    {
        private Door instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of Door
            var face = new Face3D(
                new List<List<double>>()
                {
                    new List<double>(){0,0,0 },
                    new List<double>(){0.5,0.5,0.5 },
                    new List<double>(){1,0,0 }
                });
            instance = new Door( 
                "mainEntrance",
                face
                );

        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Door
        /// </summary>
        [Test]
        public void DoorInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" Door
            //Assert.IsInstanceOf(typeof(Door), instance);
        }


        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Test]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property 'DisplayName'
        /// </summary>
        [Test]
        public void DisplayNameTest()
        {
            // TODO unit test for the property 'DisplayName'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }
        /// <summary>
        /// Test the property 'Geometry'
        /// </summary>
        [Test]
        public void GeometryTest()
        {
            // TODO unit test for the property 'Geometry'
        }
        /// <summary>
        /// Test the property 'BoundaryCondition'
        /// </summary>
        [Test]
        public void BoundaryConditionTest()
        {
            this.instance.BoundaryCondition = new Outdoors(sunExposure: false, viewFactor: 0.5);
            var bcObj = this.instance.BoundaryCondition.Obj as Outdoors;
            Assert.IsTrue(bcObj.SunExposure == false);

        }
        /// <summary>
        /// Test the property 'IsGlass'
        /// </summary>
        [Test]
        public void IsGlassTest()
        {
            // TODO unit test for the property 'IsGlass'
        }
        /// <summary>
        /// Test the property 'Properties'
        /// </summary>
        [Test]
        public void PropertiesTest()
        {
            // TODO unit test for the property 'Properties'
        }

        /// <summary>
        /// Test the ToJson with a default instance
        /// </summary>
        [Test]
        public void ToJsonTest()
        {
            var j = this.instance.ToJson();

            var obj = Door.FromJson(j);

            var bc = obj.BoundaryCondition.Obj as Outdoors;
            Assert.IsTrue(bc.ViewFactor == "autocalculate");
        }

        /// <summary>
        /// Test the ToJson with a default instance
        /// </summary>
        [Test]
        public void ToJsonViewTypeTest()
        {
            this.instance.BoundaryCondition = new Outdoors(sunExposure: false, viewFactor: 0.5);
            var j = this.instance.ToJson();

            var obj = Door.FromJson(j);

            var bc = obj.BoundaryCondition.Obj as Outdoors;
            Assert.IsTrue((double)bc.ViewFactor.Obj == 0.5);

        }
    }

}
