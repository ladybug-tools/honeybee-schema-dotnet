/* 
 * Honeybee Model Schema
 *
 * Documentation for Honeybee model schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace HoneybeeSchema
{
    /// <summary>
    /// Construction for window objects (Aperture, Door).
    /// </summary>
    [Serializable]
    [DataContract(Name = "WindowConstructionAbridged")]
    public partial class WindowConstructionAbridged : IDdEnergyBaseModel, IEquatable<WindowConstructionAbridged>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WindowConstructionAbridged" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WindowConstructionAbridged() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "WindowConstructionAbridged";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WindowConstructionAbridged" /> class.
        /// </summary>
        /// <param name="materials">List of strings for glazing or gas material identifiers. The order of the materials is from exterior to interior. If a SimpleGlazSys material is used, it must be the only material in the construction. For multi-layered constructions, adjacent glass layers must be separated by one and only one gas layer. (required).</param>
        /// <param name="frame">An optional identifier for a frame material that surrounds the window construction..</param>
        /// <param name="identifier">Text string for a unique object ID. This identifier remains constant as the object is mutated, copied, and serialized to different formats (eg. dict, idf, osm). This identifier is also used to reference the object across a Model. It must be &lt; 100 characters, use only ASCII characters and exclude (, ; ! \\n \\t). (required).</param>
        /// <param name="displayName">Display name of the object with no character restrictions..</param>
        /// <param name="userData">Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list)..</param>
        public WindowConstructionAbridged
        (
            string identifier, List<string> materials, // Required parameters
            string displayName= default, Object userData= default, string frame= default// Optional parameters
        ) : base(identifier: identifier, displayName: displayName, userData: userData )// BaseClass
        {
            // to ensure "materials" is required (not null)
            this.Materials = materials ?? throw new ArgumentNullException("materials is a required property for WindowConstructionAbridged and cannot be null");
            this.Frame = frame;

            // Set non-required readonly properties with defaultValue
            this.Type = "WindowConstructionAbridged";

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof(WindowConstructionAbridged))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "WindowConstructionAbridged";

        /// <summary>
        /// List of strings for glazing or gas material identifiers. The order of the materials is from exterior to interior. If a SimpleGlazSys material is used, it must be the only material in the construction. For multi-layered constructions, adjacent glass layers must be separated by one and only one gas layer.
        /// </summary>
        /// <value>List of strings for glazing or gas material identifiers. The order of the materials is from exterior to interior. If a SimpleGlazSys material is used, it must be the only material in the construction. For multi-layered constructions, adjacent glass layers must be separated by one and only one gas layer.</value>
        [DataMember(Name = "materials", IsRequired = true)]
        public List<string> Materials { get; set; } 
        /// <summary>
        /// An optional identifier for a frame material that surrounds the window construction.
        /// </summary>
        /// <value>An optional identifier for a frame material that surrounds the window construction.</value>
        [DataMember(Name = "frame")]
        public string Frame { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "WindowConstructionAbridged";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("WindowConstructionAbridged:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Identifier: ").Append(this.Identifier).Append("\n");
            sb.Append("  DisplayName: ").Append(this.DisplayName).Append("\n");
            sb.Append("  UserData: ").Append(this.UserData).Append("\n");
            sb.Append("  Materials: ").Append(this.Materials).Append("\n");
            sb.Append("  Frame: ").Append(this.Frame).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>WindowConstructionAbridged object</returns>
        public static WindowConstructionAbridged FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<WindowConstructionAbridged>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>WindowConstructionAbridged object</returns>
        public virtual WindowConstructionAbridged DuplicateWindowConstructionAbridged()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateWindowConstructionAbridged();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override IDdEnergyBaseModel DuplicateIDdEnergyBaseModel()
        {
            return DuplicateWindowConstructionAbridged();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as WindowConstructionAbridged);
        }

        /// <summary>
        /// Returns true if WindowConstructionAbridged instances are equal
        /// </summary>
        /// <param name="input">Instance of WindowConstructionAbridged to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WindowConstructionAbridged input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Materials == input.Materials ||
                    Extension.AllEquals(this.Materials, input.Materials)
                ) && 
                    Extension.Equals(this.Type, input.Type) && 
                    Extension.Equals(this.Frame, input.Frame);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Materials != null)
                    hashCode = hashCode * 59 + this.Materials.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Frame != null)
                    hashCode = hashCode * 59 + this.Frame.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^WindowConstructionAbridged$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            // Frame (string) maxLength
            if(this.Frame != null && this.Frame.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Frame, length must be less than 100.", new [] { "Frame" });
            }

            // Frame (string) minLength
            if(this.Frame != null && this.Frame.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Frame, length must be greater than 1.", new [] { "Frame" });
            }
            
            yield break;
        }
    }
}
