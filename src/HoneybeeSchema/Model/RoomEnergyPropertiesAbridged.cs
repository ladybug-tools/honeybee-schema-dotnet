/* 
 * Honeybee Model Schema
 *
 * Documentation for Honeybee model schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace HoneybeeSchema
{
    /// <summary>
    /// Base class for all objects that are not extensible with additional keys.  This effectively includes all objects except for the Properties classes that are assigned to geometry objects.
    /// </summary>
    [DataContract(Name = "RoomEnergyPropertiesAbridged")]
    public partial class RoomEnergyPropertiesAbridged : OpenAPIGenBaseModel, IEquatable<RoomEnergyPropertiesAbridged>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoomEnergyPropertiesAbridged" /> class.
        /// </summary>
        /// <param name="constructionSet">Identifier of a ConstructionSet to specify all default constructions for the Faces, Apertures, and Doors of the Room. If None, the Room will use the Model global_construction_set..</param>
        /// <param name="programType">Identifier of a ProgramType to specify all default schedules and loads for the Room. If None, the Room will have no loads or setpoints..</param>
        /// <param name="hvac">An optional identifier of a HVAC system (such as an IdealAirSystem) that specifies how the Room is conditioned. If None, it will be assumed that the Room is not conditioned..</param>
        /// <param name="people">People object to describe the occupancy of the Room..</param>
        /// <param name="lighting">Lighting object to describe the lighting usage of the Room..</param>
        /// <param name="electricEquipment">ElectricEquipment object to describe the electric equipment usage..</param>
        /// <param name="gasEquipment">GasEquipment object to describe the gas equipment usage..</param>
        /// <param name="serviceHotWater">ServiceHotWater object to describe the hot water usage..</param>
        /// <param name="infiltration">Infiltration object to to describe the outdoor air leakage..</param>
        /// <param name="ventilation">Ventilation object for the minimum outdoor air requirement..</param>
        /// <param name="setpoint">Setpoint object for the temperature setpoints of the Room..</param>
        /// <param name="daylightingControl">An optional DaylightingControl object to dictate the dimming of lights. If None, the lighting will respond only to the schedule and not the daylight conditions within the room..</param>
        /// <param name="windowVentControl">An optional VentilationControl object to dictate the opening of windows. If None, the windows will never open..</param>
        public RoomEnergyPropertiesAbridged
        (
           // Required parameters
           string constructionSet= default, string programType= default, string hvac= default, PeopleAbridged people= default, LightingAbridged lighting= default, ElectricEquipmentAbridged electricEquipment= default, GasEquipmentAbridged gasEquipment= default, ServiceHotWaterAbridged serviceHotWater= default, InfiltrationAbridged infiltration= default, VentilationAbridged ventilation= default, SetpointAbridged setpoint= default, DaylightingControl daylightingControl= default, VentilationControlAbridged windowVentControl= default// Optional parameters
        ) : base()// BaseClass
        {
            this.ConstructionSet = constructionSet;
            this.ProgramType = programType;
            this.Hvac = hvac;
            this.People = people;
            this.Lighting = lighting;
            this.ElectricEquipment = electricEquipment;
            this.GasEquipment = gasEquipment;
            this.ServiceHotWater = serviceHotWater;
            this.Infiltration = infiltration;
            this.Ventilation = ventilation;
            this.Setpoint = setpoint;
            this.DaylightingControl = daylightingControl;
            this.WindowVentControl = windowVentControl;

            // Set non-required readonly properties with defaultValue
            this.Type = "RoomEnergyPropertiesAbridged";
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "RoomEnergyPropertiesAbridged";

        /// <summary>
        /// Identifier of a ConstructionSet to specify all default constructions for the Faces, Apertures, and Doors of the Room. If None, the Room will use the Model global_construction_set.
        /// </summary>
        /// <value>Identifier of a ConstructionSet to specify all default constructions for the Faces, Apertures, and Doors of the Room. If None, the Room will use the Model global_construction_set.</value>
        [DataMember(Name = "construction_set")]
        public string ConstructionSet { get; set; } 
        /// <summary>
        /// Identifier of a ProgramType to specify all default schedules and loads for the Room. If None, the Room will have no loads or setpoints.
        /// </summary>
        /// <value>Identifier of a ProgramType to specify all default schedules and loads for the Room. If None, the Room will have no loads or setpoints.</value>
        [DataMember(Name = "program_type")]
        public string ProgramType { get; set; } 
        /// <summary>
        /// An optional identifier of a HVAC system (such as an IdealAirSystem) that specifies how the Room is conditioned. If None, it will be assumed that the Room is not conditioned.
        /// </summary>
        /// <value>An optional identifier of a HVAC system (such as an IdealAirSystem) that specifies how the Room is conditioned. If None, it will be assumed that the Room is not conditioned.</value>
        [DataMember(Name = "hvac")]
        public string Hvac { get; set; } 
        /// <summary>
        /// People object to describe the occupancy of the Room.
        /// </summary>
        /// <value>People object to describe the occupancy of the Room.</value>
        [DataMember(Name = "people")]
        public PeopleAbridged People { get; set; } 
        /// <summary>
        /// Lighting object to describe the lighting usage of the Room.
        /// </summary>
        /// <value>Lighting object to describe the lighting usage of the Room.</value>
        [DataMember(Name = "lighting")]
        public LightingAbridged Lighting { get; set; } 
        /// <summary>
        /// ElectricEquipment object to describe the electric equipment usage.
        /// </summary>
        /// <value>ElectricEquipment object to describe the electric equipment usage.</value>
        [DataMember(Name = "electric_equipment")]
        public ElectricEquipmentAbridged ElectricEquipment { get; set; } 
        /// <summary>
        /// GasEquipment object to describe the gas equipment usage.
        /// </summary>
        /// <value>GasEquipment object to describe the gas equipment usage.</value>
        [DataMember(Name = "gas_equipment")]
        public GasEquipmentAbridged GasEquipment { get; set; } 
        /// <summary>
        /// ServiceHotWater object to describe the hot water usage.
        /// </summary>
        /// <value>ServiceHotWater object to describe the hot water usage.</value>
        [DataMember(Name = "service_hot_water")]
        public ServiceHotWaterAbridged ServiceHotWater { get; set; } 
        /// <summary>
        /// Infiltration object to to describe the outdoor air leakage.
        /// </summary>
        /// <value>Infiltration object to to describe the outdoor air leakage.</value>
        [DataMember(Name = "infiltration")]
        public InfiltrationAbridged Infiltration { get; set; } 
        /// <summary>
        /// Ventilation object for the minimum outdoor air requirement.
        /// </summary>
        /// <value>Ventilation object for the minimum outdoor air requirement.</value>
        [DataMember(Name = "ventilation")]
        public VentilationAbridged Ventilation { get; set; } 
        /// <summary>
        /// Setpoint object for the temperature setpoints of the Room.
        /// </summary>
        /// <value>Setpoint object for the temperature setpoints of the Room.</value>
        [DataMember(Name = "setpoint")]
        public SetpointAbridged Setpoint { get; set; } 
        /// <summary>
        /// An optional DaylightingControl object to dictate the dimming of lights. If None, the lighting will respond only to the schedule and not the daylight conditions within the room.
        /// </summary>
        /// <value>An optional DaylightingControl object to dictate the dimming of lights. If None, the lighting will respond only to the schedule and not the daylight conditions within the room.</value>
        [DataMember(Name = "daylighting_control")]
        public DaylightingControl DaylightingControl { get; set; } 
        /// <summary>
        /// An optional VentilationControl object to dictate the opening of windows. If None, the windows will never open.
        /// </summary>
        /// <value>An optional VentilationControl object to dictate the opening of windows. If None, the windows will never open.</value>
        [DataMember(Name = "window_vent_control")]
        public VentilationControlAbridged WindowVentControl { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "RoomEnergyPropertiesAbridged";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("RoomEnergyPropertiesAbridged:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ConstructionSet: ").Append(ConstructionSet).Append("\n");
            sb.Append("  ProgramType: ").Append(ProgramType).Append("\n");
            sb.Append("  Hvac: ").Append(Hvac).Append("\n");
            sb.Append("  People: ").Append(People).Append("\n");
            sb.Append("  Lighting: ").Append(Lighting).Append("\n");
            sb.Append("  ElectricEquipment: ").Append(ElectricEquipment).Append("\n");
            sb.Append("  GasEquipment: ").Append(GasEquipment).Append("\n");
            sb.Append("  ServiceHotWater: ").Append(ServiceHotWater).Append("\n");
            sb.Append("  Infiltration: ").Append(Infiltration).Append("\n");
            sb.Append("  Ventilation: ").Append(Ventilation).Append("\n");
            sb.Append("  Setpoint: ").Append(Setpoint).Append("\n");
            sb.Append("  DaylightingControl: ").Append(DaylightingControl).Append("\n");
            sb.Append("  WindowVentControl: ").Append(WindowVentControl).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>RoomEnergyPropertiesAbridged object</returns>
        public static RoomEnergyPropertiesAbridged FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<RoomEnergyPropertiesAbridged>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>RoomEnergyPropertiesAbridged object</returns>
        public virtual RoomEnergyPropertiesAbridged DuplicateRoomEnergyPropertiesAbridged()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateRoomEnergyPropertiesAbridged();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateRoomEnergyPropertiesAbridged();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as RoomEnergyPropertiesAbridged);
        }

        /// <summary>
        /// Returns true if RoomEnergyPropertiesAbridged instances are equal
        /// </summary>
        /// <param name="input">Instance of RoomEnergyPropertiesAbridged to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RoomEnergyPropertiesAbridged input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.ConstructionSet == input.ConstructionSet ||
                    (this.ConstructionSet != null &&
                    this.ConstructionSet.Equals(input.ConstructionSet))
                ) && base.Equals(input) && 
                (
                    this.ProgramType == input.ProgramType ||
                    (this.ProgramType != null &&
                    this.ProgramType.Equals(input.ProgramType))
                ) && base.Equals(input) && 
                (
                    this.Hvac == input.Hvac ||
                    (this.Hvac != null &&
                    this.Hvac.Equals(input.Hvac))
                ) && base.Equals(input) && 
                (
                    this.People == input.People ||
                    (this.People != null &&
                    this.People.Equals(input.People))
                ) && base.Equals(input) && 
                (
                    this.Lighting == input.Lighting ||
                    (this.Lighting != null &&
                    this.Lighting.Equals(input.Lighting))
                ) && base.Equals(input) && 
                (
                    this.ElectricEquipment == input.ElectricEquipment ||
                    (this.ElectricEquipment != null &&
                    this.ElectricEquipment.Equals(input.ElectricEquipment))
                ) && base.Equals(input) && 
                (
                    this.GasEquipment == input.GasEquipment ||
                    (this.GasEquipment != null &&
                    this.GasEquipment.Equals(input.GasEquipment))
                ) && base.Equals(input) && 
                (
                    this.ServiceHotWater == input.ServiceHotWater ||
                    (this.ServiceHotWater != null &&
                    this.ServiceHotWater.Equals(input.ServiceHotWater))
                ) && base.Equals(input) && 
                (
                    this.Infiltration == input.Infiltration ||
                    (this.Infiltration != null &&
                    this.Infiltration.Equals(input.Infiltration))
                ) && base.Equals(input) && 
                (
                    this.Ventilation == input.Ventilation ||
                    (this.Ventilation != null &&
                    this.Ventilation.Equals(input.Ventilation))
                ) && base.Equals(input) && 
                (
                    this.Setpoint == input.Setpoint ||
                    (this.Setpoint != null &&
                    this.Setpoint.Equals(input.Setpoint))
                ) && base.Equals(input) && 
                (
                    this.DaylightingControl == input.DaylightingControl ||
                    (this.DaylightingControl != null &&
                    this.DaylightingControl.Equals(input.DaylightingControl))
                ) && base.Equals(input) && 
                (
                    this.WindowVentControl == input.WindowVentControl ||
                    (this.WindowVentControl != null &&
                    this.WindowVentControl.Equals(input.WindowVentControl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ConstructionSet != null)
                    hashCode = hashCode * 59 + this.ConstructionSet.GetHashCode();
                if (this.ProgramType != null)
                    hashCode = hashCode * 59 + this.ProgramType.GetHashCode();
                if (this.Hvac != null)
                    hashCode = hashCode * 59 + this.Hvac.GetHashCode();
                if (this.People != null)
                    hashCode = hashCode * 59 + this.People.GetHashCode();
                if (this.Lighting != null)
                    hashCode = hashCode * 59 + this.Lighting.GetHashCode();
                if (this.ElectricEquipment != null)
                    hashCode = hashCode * 59 + this.ElectricEquipment.GetHashCode();
                if (this.GasEquipment != null)
                    hashCode = hashCode * 59 + this.GasEquipment.GetHashCode();
                if (this.ServiceHotWater != null)
                    hashCode = hashCode * 59 + this.ServiceHotWater.GetHashCode();
                if (this.Infiltration != null)
                    hashCode = hashCode * 59 + this.Infiltration.GetHashCode();
                if (this.Ventilation != null)
                    hashCode = hashCode * 59 + this.Ventilation.GetHashCode();
                if (this.Setpoint != null)
                    hashCode = hashCode * 59 + this.Setpoint.GetHashCode();
                if (this.DaylightingControl != null)
                    hashCode = hashCode * 59 + this.DaylightingControl.GetHashCode();
                if (this.WindowVentControl != null)
                    hashCode = hashCode * 59 + this.WindowVentControl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^RoomEnergyPropertiesAbridged$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            // ConstructionSet (string) maxLength
            if(this.ConstructionSet != null && this.ConstructionSet.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConstructionSet, length must be less than 100.", new [] { "ConstructionSet" });
            }

            // ConstructionSet (string) minLength
            if(this.ConstructionSet != null && this.ConstructionSet.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ConstructionSet, length must be greater than 1.", new [] { "ConstructionSet" });
            }
            
            // ProgramType (string) maxLength
            if(this.ProgramType != null && this.ProgramType.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramType, length must be less than 100.", new [] { "ProgramType" });
            }

            // ProgramType (string) minLength
            if(this.ProgramType != null && this.ProgramType.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ProgramType, length must be greater than 1.", new [] { "ProgramType" });
            }
            
            // Hvac (string) maxLength
            if(this.Hvac != null && this.Hvac.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hvac, length must be less than 100.", new [] { "Hvac" });
            }

            // Hvac (string) minLength
            if(this.Hvac != null && this.Hvac.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Hvac, length must be greater than 1.", new [] { "Hvac" });
            }
            
            yield break;
        }
    }
}
