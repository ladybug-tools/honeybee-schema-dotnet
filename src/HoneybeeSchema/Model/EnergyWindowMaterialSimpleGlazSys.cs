/* 
 * Honeybee Model Schema
 *
 * Documentation for Honeybee model schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace HoneybeeSchema
{
    /// <summary>
    /// Describe an entire glazing system rather than individual layers.  Used when only very limited information is available on the glazing layers or when specific performance levels are being targeted.
    /// </summary>
    [Summary(@"Describe an entire glazing system rather than individual layers.  Used when only very limited information is available on the glazing layers or when specific performance levels are being targeted.")]
    [Serializable]
    [DataContract(Name = "EnergyWindowMaterialSimpleGlazSys")]
    public partial class EnergyWindowMaterialSimpleGlazSys : IDdEnergyBaseModel, IEquatable<EnergyWindowMaterialSimpleGlazSys>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyWindowMaterialSimpleGlazSys" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyWindowMaterialSimpleGlazSys() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "EnergyWindowMaterialSimpleGlazSys";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyWindowMaterialSimpleGlazSys" /> class.
        /// </summary>
        /// <param name="uFactor">The overall heat transfer coefficient for window system in W/m2-K. Note that constructions with U-values above 5.8 should not be assigned to skylights as this implies the resistance of the window is negative when air films are subtracted. (required).</param>
        /// <param name="shgc">Unit-less quantity for the Solar Heat Gain Coefficient (solar transmittance + conduction) at normal incidence and vertical orientation. (required).</param>
        /// <param name="vt">The fraction of visible light falling on the window that makes it through the glass at normal incidence. (default to 0.54D).</param>
        /// <param name="identifier">Text string for a unique object ID. This identifier remains constant as the object is mutated, copied, and serialized to different formats (eg. dict, idf, osm). This identifier is also used to reference the object across a Model. It must be &lt; 100 characters, use only ASCII characters and exclude (, ; ! \\n \\t). (required).</param>
        /// <param name="displayName">Display name of the object with no character restrictions..</param>
        /// <param name="userData">Optional dictionary of user data associated with the object.All keys and values of this dictionary should be of a standard data type to ensure correct serialization of the object (eg. str, float, int, list)..</param>
        public EnergyWindowMaterialSimpleGlazSys
        (
            string identifier, double uFactor, double shgc, // Required parameters
            string displayName= default, Object userData= default, double vt = 0.54D// Optional parameters
        ) : base(identifier: identifier, displayName: displayName, userData: userData )// BaseClass
        {
            this.UFactor = uFactor;
            this.Shgc = shgc;
            this.Vt = vt;

            // Set non-required readonly properties with defaultValue
            this.Type = "EnergyWindowMaterialSimpleGlazSys";

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof(EnergyWindowMaterialSimpleGlazSys))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Summary(@"Type")]
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "EnergyWindowMaterialSimpleGlazSys";

        /// <summary>
        /// The overall heat transfer coefficient for window system in W/m2-K. Note that constructions with U-values above 5.8 should not be assigned to skylights as this implies the resistance of the window is negative when air films are subtracted.
        /// </summary>
        /// <value>The overall heat transfer coefficient for window system in W/m2-K. Note that constructions with U-values above 5.8 should not be assigned to skylights as this implies the resistance of the window is negative when air films are subtracted.</value>
        [Summary(@"The overall heat transfer coefficient for window system in W/m2-K. Note that constructions with U-values above 5.8 should not be assigned to skylights as this implies the resistance of the window is negative when air films are subtracted.")]
        [DataMember(Name = "u_factor", IsRequired = true)]
        public double UFactor { get; set; } 
        /// <summary>
        /// Unit-less quantity for the Solar Heat Gain Coefficient (solar transmittance + conduction) at normal incidence and vertical orientation.
        /// </summary>
        /// <value>Unit-less quantity for the Solar Heat Gain Coefficient (solar transmittance + conduction) at normal incidence and vertical orientation.</value>
        [Summary(@"Unit-less quantity for the Solar Heat Gain Coefficient (solar transmittance + conduction) at normal incidence and vertical orientation.")]
        [DataMember(Name = "shgc", IsRequired = true)]
        public double Shgc { get; set; } 
        /// <summary>
        /// The fraction of visible light falling on the window that makes it through the glass at normal incidence.
        /// </summary>
        /// <value>The fraction of visible light falling on the window that makes it through the glass at normal incidence.</value>
        [Summary(@"The fraction of visible light falling on the window that makes it through the glass at normal incidence.")]
        [DataMember(Name = "vt")]
        public double Vt { get; set; }  = 0.54D;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "EnergyWindowMaterialSimpleGlazSys";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("EnergyWindowMaterialSimpleGlazSys:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Identifier: ").Append(this.Identifier).Append("\n");
            sb.Append("  DisplayName: ").Append(this.DisplayName).Append("\n");
            sb.Append("  UserData: ").Append(this.UserData).Append("\n");
            sb.Append("  UFactor: ").Append(this.UFactor).Append("\n");
            sb.Append("  Shgc: ").Append(this.Shgc).Append("\n");
            sb.Append("  Vt: ").Append(this.Vt).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>EnergyWindowMaterialSimpleGlazSys object</returns>
        public static EnergyWindowMaterialSimpleGlazSys FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<EnergyWindowMaterialSimpleGlazSys>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>EnergyWindowMaterialSimpleGlazSys object</returns>
        public virtual EnergyWindowMaterialSimpleGlazSys DuplicateEnergyWindowMaterialSimpleGlazSys()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateEnergyWindowMaterialSimpleGlazSys();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override IDdEnergyBaseModel DuplicateIDdEnergyBaseModel()
        {
            return DuplicateEnergyWindowMaterialSimpleGlazSys();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as EnergyWindowMaterialSimpleGlazSys);
        }

        /// <summary>
        /// Returns true if EnergyWindowMaterialSimpleGlazSys instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyWindowMaterialSimpleGlazSys to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyWindowMaterialSimpleGlazSys input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.UFactor, input.UFactor) && 
                    Extension.Equals(this.Shgc, input.Shgc) && 
                    Extension.Equals(this.Type, input.Type) && 
                    Extension.Equals(this.Vt, input.Vt);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.UFactor != null)
                    hashCode = hashCode * 59 + this.UFactor.GetHashCode();
                if (this.Shgc != null)
                    hashCode = hashCode * 59 + this.Shgc.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Vt != null)
                    hashCode = hashCode * 59 + this.Vt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // UFactor (double) maximum
            if(this.UFactor > (double)12)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UFactor, must be a value less than or equal to 12.", new [] { "UFactor" });
            }


            
            // Type (string) pattern
            Regex regexType = new Regex(@"^EnergyWindowMaterialSimpleGlazSys$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
