/* 
 * Honeybee Model Schema
 *
 * Documentation for Honeybee model schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace HoneybeeSchema
{
    /// <summary>
    /// Base class for all objects that are not extensible with additional keys.  This effectively includes all objects except for the Properties classes that are assigned to geometry objects.
    /// </summary>
    [Summary(@"Base class for all objects that are not extensible with additional keys.  This effectively includes all objects except for the Properties classes that are assigned to geometry objects.")]
    [Serializable]
    [DataContract(Name = "GlobalModifierSet")]
    public partial class GlobalModifierSet : OpenAPIGenBaseModel, IEquatable<GlobalModifierSet>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalModifierSet" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        public GlobalModifierSet
        (
            // Required parameters
            // Optional parameters
        ) : base()// BaseClass
        {

            // Set non-required readonly properties with defaultValue
            this.Type = "GlobalModifierSet";
            this.AirBoundaryModifier = "air_boundary";
            this.ContextModifier = "generic_context_0.20";

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof(GlobalModifierSet))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Summary(@"Type")]
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "GlobalModifierSet";
        //============================================== is ReadOnly 
        /// <summary>
        /// Global Honeybee Radiance modifiers.
        /// </summary>
        /// <value>Global Honeybee Radiance modifiers.</value>
        [Summary(@"Global Honeybee Radiance modifiers.")]
        [DataMember(Name = "modifiers")]
        public List<AnyOf<Plastic,Glass,Trans>> Modifiers { get; protected set; } 
        //============================================== is ReadOnly 
        /// <summary>
        /// Global Honeybee WallModifierSet.
        /// </summary>
        /// <value>Global Honeybee WallModifierSet.</value>
        [Summary(@"Global Honeybee WallModifierSet.")]
        [DataMember(Name = "wall_set")]
        public WallModifierSetAbridged WallSet { get; protected set; } 
        //============================================== is ReadOnly 
        /// <summary>
        /// Global Honeybee FloorModifierSet.
        /// </summary>
        /// <value>Global Honeybee FloorModifierSet.</value>
        [Summary(@"Global Honeybee FloorModifierSet.")]
        [DataMember(Name = "floor_set")]
        public FloorModifierSetAbridged FloorSet { get; protected set; } 
        //============================================== is ReadOnly 
        /// <summary>
        /// Global Honeybee RoofCeilingModifierSet.
        /// </summary>
        /// <value>Global Honeybee RoofCeilingModifierSet.</value>
        [Summary(@"Global Honeybee RoofCeilingModifierSet.")]
        [DataMember(Name = "roof_ceiling_set")]
        public RoofCeilingModifierSetAbridged RoofCeilingSet { get; protected set; } 
        //============================================== is ReadOnly 
        /// <summary>
        /// Global Honeybee ApertureModifierSet.
        /// </summary>
        /// <value>Global Honeybee ApertureModifierSet.</value>
        [Summary(@"Global Honeybee ApertureModifierSet.")]
        [DataMember(Name = "aperture_set")]
        public ApertureModifierSetAbridged ApertureSet { get; protected set; } 
        //============================================== is ReadOnly 
        /// <summary>
        /// Global Honeybee DoorModifierSet.
        /// </summary>
        /// <value>Global Honeybee DoorModifierSet.</value>
        [Summary(@"Global Honeybee DoorModifierSet.")]
        [DataMember(Name = "door_set")]
        public DoorModifierSetAbridged DoorSet { get; protected set; } 
        //============================================== is ReadOnly 
        /// <summary>
        /// Global Honeybee ShadeModifierSet.
        /// </summary>
        /// <value>Global Honeybee ShadeModifierSet.</value>
        [Summary(@"Global Honeybee ShadeModifierSet.")]
        [DataMember(Name = "shade_set")]
        public ShadeModifierSetAbridged ShadeSet { get; protected set; } 
        //============================================== is ReadOnly 
        /// <summary>
        /// Global Honeybee Modifier for AirBoundary Faces.
        /// </summary>
        /// <value>Global Honeybee Modifier for AirBoundary Faces.</value>
        [Summary(@"Global Honeybee Modifier for AirBoundary Faces.")]
        [DataMember(Name = "air_boundary_modifier")]
        public string AirBoundaryModifier { get; protected set; }  = "air_boundary";
        //============================================== is ReadOnly 
        /// <summary>
        /// Global Honeybee Modifier for context Shades.
        /// </summary>
        /// <value>Global Honeybee Modifier for context Shades.</value>
        [Summary(@"Global Honeybee Modifier for context Shades.")]
        [DataMember(Name = "context_modifier")]
        public string ContextModifier { get; protected set; }  = "generic_context_0.20";


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "GlobalModifierSet";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("GlobalModifierSet:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  Modifiers: ").Append(this.Modifiers).Append("\n");
            sb.Append("  WallSet: ").Append(this.WallSet).Append("\n");
            sb.Append("  FloorSet: ").Append(this.FloorSet).Append("\n");
            sb.Append("  RoofCeilingSet: ").Append(this.RoofCeilingSet).Append("\n");
            sb.Append("  ApertureSet: ").Append(this.ApertureSet).Append("\n");
            sb.Append("  DoorSet: ").Append(this.DoorSet).Append("\n");
            sb.Append("  ShadeSet: ").Append(this.ShadeSet).Append("\n");
            sb.Append("  AirBoundaryModifier: ").Append(this.AirBoundaryModifier).Append("\n");
            sb.Append("  ContextModifier: ").Append(this.ContextModifier).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>GlobalModifierSet object</returns>
        public static GlobalModifierSet FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<GlobalModifierSet>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>GlobalModifierSet object</returns>
        public virtual GlobalModifierSet DuplicateGlobalModifierSet()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateGlobalModifierSet();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateGlobalModifierSet();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as GlobalModifierSet);
        }

        /// <summary>
        /// Returns true if GlobalModifierSet instances are equal
        /// </summary>
        /// <param name="input">Instance of GlobalModifierSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GlobalModifierSet input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Type, input.Type) && 
                (
                    this.Modifiers == input.Modifiers ||
                    Extension.AllEquals(this.Modifiers, input.Modifiers)
                ) && 
                    Extension.Equals(this.WallSet, input.WallSet) && 
                    Extension.Equals(this.FloorSet, input.FloorSet) && 
                    Extension.Equals(this.RoofCeilingSet, input.RoofCeilingSet) && 
                    Extension.Equals(this.ApertureSet, input.ApertureSet) && 
                    Extension.Equals(this.DoorSet, input.DoorSet) && 
                    Extension.Equals(this.ShadeSet, input.ShadeSet) && 
                    Extension.Equals(this.AirBoundaryModifier, input.AirBoundaryModifier) && 
                    Extension.Equals(this.ContextModifier, input.ContextModifier);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Modifiers != null)
                    hashCode = hashCode * 59 + this.Modifiers.GetHashCode();
                if (this.WallSet != null)
                    hashCode = hashCode * 59 + this.WallSet.GetHashCode();
                if (this.FloorSet != null)
                    hashCode = hashCode * 59 + this.FloorSet.GetHashCode();
                if (this.RoofCeilingSet != null)
                    hashCode = hashCode * 59 + this.RoofCeilingSet.GetHashCode();
                if (this.ApertureSet != null)
                    hashCode = hashCode * 59 + this.ApertureSet.GetHashCode();
                if (this.DoorSet != null)
                    hashCode = hashCode * 59 + this.DoorSet.GetHashCode();
                if (this.ShadeSet != null)
                    hashCode = hashCode * 59 + this.ShadeSet.GetHashCode();
                if (this.AirBoundaryModifier != null)
                    hashCode = hashCode * 59 + this.AirBoundaryModifier.GetHashCode();
                if (this.ContextModifier != null)
                    hashCode = hashCode * 59 + this.ContextModifier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^GlobalModifierSet$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
