/* 
 * Honeybee Simulation Parameter Schema
 *
 * Documentation for Honeybee simulation-parameter schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace HoneybeeSchema
{
    /// <summary>
    /// Used to specify which types of calculations to run.
    /// </summary>
    [Serializable]
    [DataContract(Name = "SimulationControl")]
    public partial class SimulationControl : OpenAPIGenBaseModel, IEquatable<SimulationControl>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationControl" /> class.
        /// </summary>
        /// <param name="doZoneSizing">Boolean for whether the zone sizing calculation should be run. (default to true).</param>
        /// <param name="doSystemSizing">Boolean for whether the system sizing calculation should be run. (default to true).</param>
        /// <param name="doPlantSizing">Boolean for whether the plant sizing calculation should be run. (default to true).</param>
        /// <param name="runForRunPeriods">Boolean for whether the simulation should be run for the sizing periods. (default to true).</param>
        /// <param name="runForSizingPeriods">Boolean for whether the simulation should be run for the run periods. (default to false).</param>
        public SimulationControl
        (
           // Required parameters
           bool doZoneSizing = true, bool doSystemSizing = true, bool doPlantSizing = true, bool runForRunPeriods = true, bool runForSizingPeriods = false// Optional parameters
        ) : base()// BaseClass
        {
            this.DoZoneSizing = doZoneSizing;
            this.DoSystemSizing = doSystemSizing;
            this.DoPlantSizing = doPlantSizing;
            this.RunForRunPeriods = runForRunPeriods;
            this.RunForSizingPeriods = runForSizingPeriods;

            // Set non-required readonly properties with defaultValue
            this.Type = "SimulationControl";

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof(SimulationControl))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "SimulationControl";

        /// <summary>
        /// Boolean for whether the zone sizing calculation should be run.
        /// </summary>
        /// <value>Boolean for whether the zone sizing calculation should be run.</value>
        [DataMember(Name = "do_zone_sizing")]
        public bool DoZoneSizing { get; set; }  = true;
        /// <summary>
        /// Boolean for whether the system sizing calculation should be run.
        /// </summary>
        /// <value>Boolean for whether the system sizing calculation should be run.</value>
        [DataMember(Name = "do_system_sizing")]
        public bool DoSystemSizing { get; set; }  = true;
        /// <summary>
        /// Boolean for whether the plant sizing calculation should be run.
        /// </summary>
        /// <value>Boolean for whether the plant sizing calculation should be run.</value>
        [DataMember(Name = "do_plant_sizing")]
        public bool DoPlantSizing { get; set; }  = true;
        /// <summary>
        /// Boolean for whether the simulation should be run for the sizing periods.
        /// </summary>
        /// <value>Boolean for whether the simulation should be run for the sizing periods.</value>
        [DataMember(Name = "run_for_run_periods")]
        public bool RunForRunPeriods { get; set; }  = true;
        /// <summary>
        /// Boolean for whether the simulation should be run for the run periods.
        /// </summary>
        /// <value>Boolean for whether the simulation should be run for the run periods.</value>
        [DataMember(Name = "run_for_sizing_periods")]
        public bool RunForSizingPeriods { get; set; }  = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "SimulationControl";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("SimulationControl:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  DoZoneSizing: ").Append(DoZoneSizing).Append("\n");
            sb.Append("  DoSystemSizing: ").Append(DoSystemSizing).Append("\n");
            sb.Append("  DoPlantSizing: ").Append(DoPlantSizing).Append("\n");
            sb.Append("  RunForRunPeriods: ").Append(RunForRunPeriods).Append("\n");
            sb.Append("  RunForSizingPeriods: ").Append(RunForSizingPeriods).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>SimulationControl object</returns>
        public static SimulationControl FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<SimulationControl>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>SimulationControl object</returns>
        public virtual SimulationControl DuplicateSimulationControl()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateSimulationControl();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateSimulationControl();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as SimulationControl);
        }

        /// <summary>
        /// Returns true if SimulationControl instances are equal
        /// </summary>
        /// <param name="input">Instance of SimulationControl to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimulationControl input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    Extension.Equals(this.Type, input.Type)
                ) && base.Equals(input) && 
                (
                    Extension.Equals(this.DoZoneSizing, input.DoZoneSizing)
                ) && base.Equals(input) && 
                (
                    Extension.Equals(this.DoSystemSizing, input.DoSystemSizing)
                ) && base.Equals(input) && 
                (
                    Extension.Equals(this.DoPlantSizing, input.DoPlantSizing)
                ) && base.Equals(input) && 
                (
                    Extension.Equals(this.RunForRunPeriods, input.RunForRunPeriods)
                ) && base.Equals(input) && 
                (
                    Extension.Equals(this.RunForSizingPeriods, input.RunForSizingPeriods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.DoZoneSizing != null)
                    hashCode = hashCode * 59 + this.DoZoneSizing.GetHashCode();
                if (this.DoSystemSizing != null)
                    hashCode = hashCode * 59 + this.DoSystemSizing.GetHashCode();
                if (this.DoPlantSizing != null)
                    hashCode = hashCode * 59 + this.DoPlantSizing.GetHashCode();
                if (this.RunForRunPeriods != null)
                    hashCode = hashCode * 59 + this.RunForRunPeriods.GetHashCode();
                if (this.RunForSizingPeriods != null)
                    hashCode = hashCode * 59 + this.RunForSizingPeriods.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^SimulationControl$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
