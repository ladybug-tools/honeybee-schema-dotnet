/* 
 * Honeybee Model Schema
 *
 * Documentation for Honeybee model schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;


namespace HoneybeeSchema
{
    /// <summary>
    /// Window blind material consisting of flat, equally-spaced slats.
    /// </summary>
    [DataContract(Name = "EnergyWindowMaterialBlind")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class EnergyWindowMaterialBlind : IDdEnergyBaseModel, IEquatable<EnergyWindowMaterialBlind>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets SlatOrientation
        /// </summary>
        [DataMember(Name="slat_orientation", EmitDefaultValue=false)]
        public SlatOrientation SlatOrientation { get; set; }   
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyWindowMaterialBlind" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyWindowMaterialBlind() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "EnergyWindowMaterialBlind";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyWindowMaterialBlind" /> class.
        /// </summary>
        /// <param name="slatOrientation">slatOrientation.</param>
        /// <param name="slatWidth">The width of slat measured from edge to edge in meters. (default to 0.025D).</param>
        /// <param name="slatSeparation">The distance between the front of a slat and the back of the adjacent slat in meters. (default to 0.01875D).</param>
        /// <param name="slatThickness">The distance between the faces of a slat in meters. The default value is 0.001. (default to 0.001D).</param>
        /// <param name="slatAngle">The angle (degrees) between the glazing outward normal and the slat outward normal where the outward normal points away from the front face of the slat (degrees). The default value is 45. (default to 45D).</param>
        /// <param name="slatConductivity">The thermal conductivity of the slat in W/(m-K). Default value is 221. (default to 221D).</param>
        /// <param name="beamSolarTransmittance">The beam solar transmittance of the slat, assumed to be independent of angle of incidence on the slat. Any transmitted beam radiation is assumed to be 100% diffuse (i.e., slats are translucent). The default value is 0. (default to 0D).</param>
        /// <param name="beamSolarReflectance">The beam solar reflectance of the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5D).</param>
        /// <param name="beamSolarReflectanceBack">The beam solar reflectance of the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5D).</param>
        /// <param name="diffuseSolarTransmittance">The slat transmittance for hemisperically diffuse solar radiation. Default value is 0. (default to 0D).</param>
        /// <param name="diffuseSolarReflectance">The front-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5. (default to 0.5D).</param>
        /// <param name="diffuseSolarReflectanceBack">The back-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5. (default to 0.5D).</param>
        /// <param name="beamVisibleTransmittance">The beam visible transmittance of the slat, it is assumed to be independent of the angle of incidence. Default value is 0. (default to 0D).</param>
        /// <param name="beamVisibleReflectance">The beam visible reflectance on the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5D).</param>
        /// <param name="beamVisibleReflectanceBack">The beam visible reflectance on the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5D).</param>
        /// <param name="diffuseVisibleTransmittance">The slat transmittance for hemispherically diffuse visible radiation. This value should equal “Slat Beam Visible Transmittance.” (default to 0D).</param>
        /// <param name="diffuseVisibleReflectance">The front-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Front Side Slat Beam Visible Reflectance.” Default value is 0.5. (default to 0.5D).</param>
        /// <param name="diffuseVisibleReflectanceBack">The back-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Back Side Slat Beam Visible Reflectance. Default value is 0.5.” (default to 0.5D).</param>
        /// <param name="infraredTransmittance">The slat infrared hemispherical transmittance. It is zero for solid metallic, wooden or glass slats, but may be non-zero in some cases such as for thin plastic slats. The default value is 0. (default to 0D).</param>
        /// <param name="emissivity">Front side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9. (default to 0.9D).</param>
        /// <param name="emissivityBack">Back side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9. (default to 0.9D).</param>
        /// <param name="distanceToGlass">The distance from the mid-plane of the blind to the adjacent glass in meters. The default value is 0.05. (default to 0.05D).</param>
        /// <param name="topOpeningMultiplier">The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. The default value is 0.5 (default to 0.5D).</param>
        /// <param name="bottomOpeningMultiplier">The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. The default value is 0. (default to 0.5D).</param>
        /// <param name="leftOpeningMultiplier">The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. The default value is 0.5. (default to 0.5D).</param>
        /// <param name="rightOpeningMultiplier">The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. The default value is 0.5. (default to 0.5D).</param>
        /// <param name="identifier">Text string for a unique object ID. This identifier remains constant as the object is mutated, copied, and serialized to different formats (eg. dict, idf, osm). This identifier is also used to reference the object across a Model. It must be &lt; 100 characters, use only ASCII characters and exclude (, ; ! \\n \\t). (required).</param>
        /// <param name="displayName">Display name of the object with no character restrictions..</param>
        public EnergyWindowMaterialBlind
        (
            string identifier, // Required parameters
            string displayName= default, SlatOrientation slatOrientation= default, double slatWidth = 0.025D, double slatSeparation = 0.01875D, double slatThickness = 0.001D, double slatAngle = 45D, double slatConductivity = 221D, double beamSolarTransmittance = 0D, double beamSolarReflectance = 0.5D, double beamSolarReflectanceBack = 0.5D, double diffuseSolarTransmittance = 0D, double diffuseSolarReflectance = 0.5D, double diffuseSolarReflectanceBack = 0.5D, double beamVisibleTransmittance = 0D, double beamVisibleReflectance = 0.5D, double beamVisibleReflectanceBack = 0.5D, double diffuseVisibleTransmittance = 0D, double diffuseVisibleReflectance = 0.5D, double diffuseVisibleReflectanceBack = 0.5D, double infraredTransmittance = 0D, double emissivity = 0.9D, double emissivityBack = 0.9D, double distanceToGlass = 0.05D, double topOpeningMultiplier = 0.5D, double bottomOpeningMultiplier = 0.5D, double leftOpeningMultiplier = 0.5D, double rightOpeningMultiplier = 0.5D// Optional parameters
        ) : base(identifier: identifier, displayName: displayName)// BaseClass
        {
            this.SlatOrientation = slatOrientation;
            this.SlatWidth = slatWidth;
            this.SlatSeparation = slatSeparation;
            this.SlatThickness = slatThickness;
            this.SlatAngle = slatAngle;
            this.SlatConductivity = slatConductivity;
            this.BeamSolarTransmittance = beamSolarTransmittance;
            this.BeamSolarReflectance = beamSolarReflectance;
            this.BeamSolarReflectanceBack = beamSolarReflectanceBack;
            this.DiffuseSolarTransmittance = diffuseSolarTransmittance;
            this.DiffuseSolarReflectance = diffuseSolarReflectance;
            this.DiffuseSolarReflectanceBack = diffuseSolarReflectanceBack;
            this.BeamVisibleTransmittance = beamVisibleTransmittance;
            this.BeamVisibleReflectance = beamVisibleReflectance;
            this.BeamVisibleReflectanceBack = beamVisibleReflectanceBack;
            this.DiffuseVisibleTransmittance = diffuseVisibleTransmittance;
            this.DiffuseVisibleReflectance = diffuseVisibleReflectance;
            this.DiffuseVisibleReflectanceBack = diffuseVisibleReflectanceBack;
            this.InfraredTransmittance = infraredTransmittance;
            this.Emissivity = emissivity;
            this.EmissivityBack = emissivityBack;
            this.DistanceToGlass = distanceToGlass;
            this.TopOpeningMultiplier = topOpeningMultiplier;
            this.BottomOpeningMultiplier = bottomOpeningMultiplier;
            this.LeftOpeningMultiplier = leftOpeningMultiplier;
            this.RightOpeningMultiplier = rightOpeningMultiplier;

            // Set non-required readonly properties with defaultValue
            this.Type = "EnergyWindowMaterialBlind";
        }

        /// <summary>
        /// The width of slat measured from edge to edge in meters.
        /// </summary>
        /// <value>The width of slat measured from edge to edge in meters.</value>
        [DataMember(Name = "slat_width", EmitDefaultValue = true)]
        
        public double SlatWidth { get; set; }  = 0.025D;
        /// <summary>
        /// The distance between the front of a slat and the back of the adjacent slat in meters.
        /// </summary>
        /// <value>The distance between the front of a slat and the back of the adjacent slat in meters.</value>
        [DataMember(Name = "slat_separation", EmitDefaultValue = true)]
        
        public double SlatSeparation { get; set; }  = 0.01875D;
        /// <summary>
        /// The distance between the faces of a slat in meters. The default value is 0.001.
        /// </summary>
        /// <value>The distance between the faces of a slat in meters. The default value is 0.001.</value>
        [DataMember(Name = "slat_thickness", EmitDefaultValue = true)]
        
        public double SlatThickness { get; set; }  = 0.001D;
        /// <summary>
        /// The angle (degrees) between the glazing outward normal and the slat outward normal where the outward normal points away from the front face of the slat (degrees). The default value is 45.
        /// </summary>
        /// <value>The angle (degrees) between the glazing outward normal and the slat outward normal where the outward normal points away from the front face of the slat (degrees). The default value is 45.</value>
        [DataMember(Name = "slat_angle", EmitDefaultValue = true)]
        
        public double SlatAngle { get; set; }  = 45D;
        /// <summary>
        /// The thermal conductivity of the slat in W/(m-K). Default value is 221.
        /// </summary>
        /// <value>The thermal conductivity of the slat in W/(m-K). Default value is 221.</value>
        [DataMember(Name = "slat_conductivity", EmitDefaultValue = true)]
        
        public double SlatConductivity { get; set; }  = 221D;
        /// <summary>
        /// The beam solar transmittance of the slat, assumed to be independent of angle of incidence on the slat. Any transmitted beam radiation is assumed to be 100% diffuse (i.e., slats are translucent). The default value is 0.
        /// </summary>
        /// <value>The beam solar transmittance of the slat, assumed to be independent of angle of incidence on the slat. Any transmitted beam radiation is assumed to be 100% diffuse (i.e., slats are translucent). The default value is 0.</value>
        [DataMember(Name = "beam_solar_transmittance", EmitDefaultValue = true)]
        
        public double BeamSolarTransmittance { get; set; }  = 0D;
        /// <summary>
        /// The beam solar reflectance of the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
        /// </summary>
        /// <value>The beam solar reflectance of the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        [DataMember(Name = "beam_solar_reflectance", EmitDefaultValue = true)]
        
        public double BeamSolarReflectance { get; set; }  = 0.5D;
        /// <summary>
        /// The beam solar reflectance of the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
        /// </summary>
        /// <value>The beam solar reflectance of the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        [DataMember(Name = "beam_solar_reflectance_back", EmitDefaultValue = true)]
        
        public double BeamSolarReflectanceBack { get; set; }  = 0.5D;
        /// <summary>
        /// The slat transmittance for hemisperically diffuse solar radiation. Default value is 0.
        /// </summary>
        /// <value>The slat transmittance for hemisperically diffuse solar radiation. Default value is 0.</value>
        [DataMember(Name = "diffuse_solar_transmittance", EmitDefaultValue = true)]
        
        public double DiffuseSolarTransmittance { get; set; }  = 0D;
        /// <summary>
        /// The front-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.
        /// </summary>
        /// <value>The front-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.</value>
        [DataMember(Name = "diffuse_solar_reflectance", EmitDefaultValue = true)]
        
        public double DiffuseSolarReflectance { get; set; }  = 0.5D;
        /// <summary>
        /// The back-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.
        /// </summary>
        /// <value>The back-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.</value>
        [DataMember(Name = "diffuse_solar_reflectance_back", EmitDefaultValue = true)]
        
        public double DiffuseSolarReflectanceBack { get; set; }  = 0.5D;
        /// <summary>
        /// The beam visible transmittance of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.
        /// </summary>
        /// <value>The beam visible transmittance of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.</value>
        [DataMember(Name = "beam_visible_transmittance", EmitDefaultValue = true)]
        
        public double BeamVisibleTransmittance { get; set; }  = 0D;
        /// <summary>
        /// The beam visible reflectance on the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
        /// </summary>
        /// <value>The beam visible reflectance on the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        [DataMember(Name = "beam_visible_reflectance", EmitDefaultValue = true)]
        
        public double BeamVisibleReflectance { get; set; }  = 0.5D;
        /// <summary>
        /// The beam visible reflectance on the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
        /// </summary>
        /// <value>The beam visible reflectance on the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        [DataMember(Name = "beam_visible_reflectance_back", EmitDefaultValue = true)]
        
        public double BeamVisibleReflectanceBack { get; set; }  = 0.5D;
        /// <summary>
        /// The slat transmittance for hemispherically diffuse visible radiation. This value should equal “Slat Beam Visible Transmittance.”
        /// </summary>
        /// <value>The slat transmittance for hemispherically diffuse visible radiation. This value should equal “Slat Beam Visible Transmittance.”</value>
        [DataMember(Name = "diffuse_visible_transmittance", EmitDefaultValue = true)]
        
        public double DiffuseVisibleTransmittance { get; set; }  = 0D;
        /// <summary>
        /// The front-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Front Side Slat Beam Visible Reflectance.” Default value is 0.5.
        /// </summary>
        /// <value>The front-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Front Side Slat Beam Visible Reflectance.” Default value is 0.5.</value>
        [DataMember(Name = "diffuse_visible_reflectance", EmitDefaultValue = true)]
        
        public double DiffuseVisibleReflectance { get; set; }  = 0.5D;
        /// <summary>
        /// The back-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Back Side Slat Beam Visible Reflectance. Default value is 0.5.”
        /// </summary>
        /// <value>The back-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Back Side Slat Beam Visible Reflectance. Default value is 0.5.”</value>
        [DataMember(Name = "diffuse_visible_reflectance_back", EmitDefaultValue = true)]
        
        public double DiffuseVisibleReflectanceBack { get; set; }  = 0.5D;
        /// <summary>
        /// The slat infrared hemispherical transmittance. It is zero for solid metallic, wooden or glass slats, but may be non-zero in some cases such as for thin plastic slats. The default value is 0.
        /// </summary>
        /// <value>The slat infrared hemispherical transmittance. It is zero for solid metallic, wooden or glass slats, but may be non-zero in some cases such as for thin plastic slats. The default value is 0.</value>
        [DataMember(Name = "infrared_transmittance", EmitDefaultValue = true)]
        
        public double InfraredTransmittance { get; set; }  = 0D;
        /// <summary>
        /// Front side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.
        /// </summary>
        /// <value>Front side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.</value>
        [DataMember(Name = "emissivity", EmitDefaultValue = true)]
        
        public double Emissivity { get; set; }  = 0.9D;
        /// <summary>
        /// Back side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.
        /// </summary>
        /// <value>Back side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.</value>
        [DataMember(Name = "emissivity_back", EmitDefaultValue = true)]
        
        public double EmissivityBack { get; set; }  = 0.9D;
        /// <summary>
        /// The distance from the mid-plane of the blind to the adjacent glass in meters. The default value is 0.05.
        /// </summary>
        /// <value>The distance from the mid-plane of the blind to the adjacent glass in meters. The default value is 0.05.</value>
        [DataMember(Name = "distance_to_glass", EmitDefaultValue = true)]
        
        public double DistanceToGlass { get; set; }  = 0.05D;
        /// <summary>
        /// The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. The default value is 0.5
        /// </summary>
        /// <value>The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. The default value is 0.5</value>
        [DataMember(Name = "top_opening_multiplier", EmitDefaultValue = true)]
        
        public double TopOpeningMultiplier { get; set; }  = 0.5D;
        /// <summary>
        /// The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. The default value is 0.
        /// </summary>
        /// <value>The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. The default value is 0.</value>
        [DataMember(Name = "bottom_opening_multiplier", EmitDefaultValue = true)]
        
        public double BottomOpeningMultiplier { get; set; }  = 0.5D;
        /// <summary>
        /// The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.
        /// </summary>
        /// <value>The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.</value>
        [DataMember(Name = "left_opening_multiplier", EmitDefaultValue = true)]
        
        public double LeftOpeningMultiplier { get; set; }  = 0.5D;
        /// <summary>
        /// The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.
        /// </summary>
        /// <value>The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.</value>
        [DataMember(Name = "right_opening_multiplier", EmitDefaultValue = true)]
        
        public double RightOpeningMultiplier { get; set; }  = 0.5D;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "EnergyWindowMaterialBlind";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("EnergyWindowMaterialBlind:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  SlatOrientation: ").Append(SlatOrientation).Append("\n");
            sb.Append("  SlatWidth: ").Append(SlatWidth).Append("\n");
            sb.Append("  SlatSeparation: ").Append(SlatSeparation).Append("\n");
            sb.Append("  SlatThickness: ").Append(SlatThickness).Append("\n");
            sb.Append("  SlatAngle: ").Append(SlatAngle).Append("\n");
            sb.Append("  SlatConductivity: ").Append(SlatConductivity).Append("\n");
            sb.Append("  BeamSolarTransmittance: ").Append(BeamSolarTransmittance).Append("\n");
            sb.Append("  BeamSolarReflectance: ").Append(BeamSolarReflectance).Append("\n");
            sb.Append("  BeamSolarReflectanceBack: ").Append(BeamSolarReflectanceBack).Append("\n");
            sb.Append("  DiffuseSolarTransmittance: ").Append(DiffuseSolarTransmittance).Append("\n");
            sb.Append("  DiffuseSolarReflectance: ").Append(DiffuseSolarReflectance).Append("\n");
            sb.Append("  DiffuseSolarReflectanceBack: ").Append(DiffuseSolarReflectanceBack).Append("\n");
            sb.Append("  BeamVisibleTransmittance: ").Append(BeamVisibleTransmittance).Append("\n");
            sb.Append("  BeamVisibleReflectance: ").Append(BeamVisibleReflectance).Append("\n");
            sb.Append("  BeamVisibleReflectanceBack: ").Append(BeamVisibleReflectanceBack).Append("\n");
            sb.Append("  DiffuseVisibleTransmittance: ").Append(DiffuseVisibleTransmittance).Append("\n");
            sb.Append("  DiffuseVisibleReflectance: ").Append(DiffuseVisibleReflectance).Append("\n");
            sb.Append("  DiffuseVisibleReflectanceBack: ").Append(DiffuseVisibleReflectanceBack).Append("\n");
            sb.Append("  InfraredTransmittance: ").Append(InfraredTransmittance).Append("\n");
            sb.Append("  Emissivity: ").Append(Emissivity).Append("\n");
            sb.Append("  EmissivityBack: ").Append(EmissivityBack).Append("\n");
            sb.Append("  DistanceToGlass: ").Append(DistanceToGlass).Append("\n");
            sb.Append("  TopOpeningMultiplier: ").Append(TopOpeningMultiplier).Append("\n");
            sb.Append("  BottomOpeningMultiplier: ").Append(BottomOpeningMultiplier).Append("\n");
            sb.Append("  LeftOpeningMultiplier: ").Append(LeftOpeningMultiplier).Append("\n");
            sb.Append("  RightOpeningMultiplier: ").Append(RightOpeningMultiplier).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>EnergyWindowMaterialBlind object</returns>
        public static EnergyWindowMaterialBlind FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<EnergyWindowMaterialBlind>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>EnergyWindowMaterialBlind object</returns>
        public virtual EnergyWindowMaterialBlind DuplicateEnergyWindowMaterialBlind()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateEnergyWindowMaterialBlind();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override IDdEnergyBaseModel DuplicateIDdEnergyBaseModel()
        {
            return DuplicateEnergyWindowMaterialBlind();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyWindowMaterialBlind);
        }

        /// <summary>
        /// Returns true if EnergyWindowMaterialBlind instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyWindowMaterialBlind to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyWindowMaterialBlind input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && base.Equals(input) && 
                (
                    this.SlatOrientation == input.SlatOrientation ||
                    (this.SlatOrientation != null &&
                    this.SlatOrientation.Equals(input.SlatOrientation))
                ) && base.Equals(input) && 
                (
                    this.SlatWidth == input.SlatWidth ||
                    (this.SlatWidth != null &&
                    this.SlatWidth.Equals(input.SlatWidth))
                ) && base.Equals(input) && 
                (
                    this.SlatSeparation == input.SlatSeparation ||
                    (this.SlatSeparation != null &&
                    this.SlatSeparation.Equals(input.SlatSeparation))
                ) && base.Equals(input) && 
                (
                    this.SlatThickness == input.SlatThickness ||
                    (this.SlatThickness != null &&
                    this.SlatThickness.Equals(input.SlatThickness))
                ) && base.Equals(input) && 
                (
                    this.SlatAngle == input.SlatAngle ||
                    (this.SlatAngle != null &&
                    this.SlatAngle.Equals(input.SlatAngle))
                ) && base.Equals(input) && 
                (
                    this.SlatConductivity == input.SlatConductivity ||
                    (this.SlatConductivity != null &&
                    this.SlatConductivity.Equals(input.SlatConductivity))
                ) && base.Equals(input) && 
                (
                    this.BeamSolarTransmittance == input.BeamSolarTransmittance ||
                    (this.BeamSolarTransmittance != null &&
                    this.BeamSolarTransmittance.Equals(input.BeamSolarTransmittance))
                ) && base.Equals(input) && 
                (
                    this.BeamSolarReflectance == input.BeamSolarReflectance ||
                    (this.BeamSolarReflectance != null &&
                    this.BeamSolarReflectance.Equals(input.BeamSolarReflectance))
                ) && base.Equals(input) && 
                (
                    this.BeamSolarReflectanceBack == input.BeamSolarReflectanceBack ||
                    (this.BeamSolarReflectanceBack != null &&
                    this.BeamSolarReflectanceBack.Equals(input.BeamSolarReflectanceBack))
                ) && base.Equals(input) && 
                (
                    this.DiffuseSolarTransmittance == input.DiffuseSolarTransmittance ||
                    (this.DiffuseSolarTransmittance != null &&
                    this.DiffuseSolarTransmittance.Equals(input.DiffuseSolarTransmittance))
                ) && base.Equals(input) && 
                (
                    this.DiffuseSolarReflectance == input.DiffuseSolarReflectance ||
                    (this.DiffuseSolarReflectance != null &&
                    this.DiffuseSolarReflectance.Equals(input.DiffuseSolarReflectance))
                ) && base.Equals(input) && 
                (
                    this.DiffuseSolarReflectanceBack == input.DiffuseSolarReflectanceBack ||
                    (this.DiffuseSolarReflectanceBack != null &&
                    this.DiffuseSolarReflectanceBack.Equals(input.DiffuseSolarReflectanceBack))
                ) && base.Equals(input) && 
                (
                    this.BeamVisibleTransmittance == input.BeamVisibleTransmittance ||
                    (this.BeamVisibleTransmittance != null &&
                    this.BeamVisibleTransmittance.Equals(input.BeamVisibleTransmittance))
                ) && base.Equals(input) && 
                (
                    this.BeamVisibleReflectance == input.BeamVisibleReflectance ||
                    (this.BeamVisibleReflectance != null &&
                    this.BeamVisibleReflectance.Equals(input.BeamVisibleReflectance))
                ) && base.Equals(input) && 
                (
                    this.BeamVisibleReflectanceBack == input.BeamVisibleReflectanceBack ||
                    (this.BeamVisibleReflectanceBack != null &&
                    this.BeamVisibleReflectanceBack.Equals(input.BeamVisibleReflectanceBack))
                ) && base.Equals(input) && 
                (
                    this.DiffuseVisibleTransmittance == input.DiffuseVisibleTransmittance ||
                    (this.DiffuseVisibleTransmittance != null &&
                    this.DiffuseVisibleTransmittance.Equals(input.DiffuseVisibleTransmittance))
                ) && base.Equals(input) && 
                (
                    this.DiffuseVisibleReflectance == input.DiffuseVisibleReflectance ||
                    (this.DiffuseVisibleReflectance != null &&
                    this.DiffuseVisibleReflectance.Equals(input.DiffuseVisibleReflectance))
                ) && base.Equals(input) && 
                (
                    this.DiffuseVisibleReflectanceBack == input.DiffuseVisibleReflectanceBack ||
                    (this.DiffuseVisibleReflectanceBack != null &&
                    this.DiffuseVisibleReflectanceBack.Equals(input.DiffuseVisibleReflectanceBack))
                ) && base.Equals(input) && 
                (
                    this.InfraredTransmittance == input.InfraredTransmittance ||
                    (this.InfraredTransmittance != null &&
                    this.InfraredTransmittance.Equals(input.InfraredTransmittance))
                ) && base.Equals(input) && 
                (
                    this.Emissivity == input.Emissivity ||
                    (this.Emissivity != null &&
                    this.Emissivity.Equals(input.Emissivity))
                ) && base.Equals(input) && 
                (
                    this.EmissivityBack == input.EmissivityBack ||
                    (this.EmissivityBack != null &&
                    this.EmissivityBack.Equals(input.EmissivityBack))
                ) && base.Equals(input) && 
                (
                    this.DistanceToGlass == input.DistanceToGlass ||
                    (this.DistanceToGlass != null &&
                    this.DistanceToGlass.Equals(input.DistanceToGlass))
                ) && base.Equals(input) && 
                (
                    this.TopOpeningMultiplier == input.TopOpeningMultiplier ||
                    (this.TopOpeningMultiplier != null &&
                    this.TopOpeningMultiplier.Equals(input.TopOpeningMultiplier))
                ) && base.Equals(input) && 
                (
                    this.BottomOpeningMultiplier == input.BottomOpeningMultiplier ||
                    (this.BottomOpeningMultiplier != null &&
                    this.BottomOpeningMultiplier.Equals(input.BottomOpeningMultiplier))
                ) && base.Equals(input) && 
                (
                    this.LeftOpeningMultiplier == input.LeftOpeningMultiplier ||
                    (this.LeftOpeningMultiplier != null &&
                    this.LeftOpeningMultiplier.Equals(input.LeftOpeningMultiplier))
                ) && base.Equals(input) && 
                (
                    this.RightOpeningMultiplier == input.RightOpeningMultiplier ||
                    (this.RightOpeningMultiplier != null &&
                    this.RightOpeningMultiplier.Equals(input.RightOpeningMultiplier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SlatOrientation != null)
                    hashCode = hashCode * 59 + this.SlatOrientation.GetHashCode();
                if (this.SlatWidth != null)
                    hashCode = hashCode * 59 + this.SlatWidth.GetHashCode();
                if (this.SlatSeparation != null)
                    hashCode = hashCode * 59 + this.SlatSeparation.GetHashCode();
                if (this.SlatThickness != null)
                    hashCode = hashCode * 59 + this.SlatThickness.GetHashCode();
                if (this.SlatAngle != null)
                    hashCode = hashCode * 59 + this.SlatAngle.GetHashCode();
                if (this.SlatConductivity != null)
                    hashCode = hashCode * 59 + this.SlatConductivity.GetHashCode();
                if (this.BeamSolarTransmittance != null)
                    hashCode = hashCode * 59 + this.BeamSolarTransmittance.GetHashCode();
                if (this.BeamSolarReflectance != null)
                    hashCode = hashCode * 59 + this.BeamSolarReflectance.GetHashCode();
                if (this.BeamSolarReflectanceBack != null)
                    hashCode = hashCode * 59 + this.BeamSolarReflectanceBack.GetHashCode();
                if (this.DiffuseSolarTransmittance != null)
                    hashCode = hashCode * 59 + this.DiffuseSolarTransmittance.GetHashCode();
                if (this.DiffuseSolarReflectance != null)
                    hashCode = hashCode * 59 + this.DiffuseSolarReflectance.GetHashCode();
                if (this.DiffuseSolarReflectanceBack != null)
                    hashCode = hashCode * 59 + this.DiffuseSolarReflectanceBack.GetHashCode();
                if (this.BeamVisibleTransmittance != null)
                    hashCode = hashCode * 59 + this.BeamVisibleTransmittance.GetHashCode();
                if (this.BeamVisibleReflectance != null)
                    hashCode = hashCode * 59 + this.BeamVisibleReflectance.GetHashCode();
                if (this.BeamVisibleReflectanceBack != null)
                    hashCode = hashCode * 59 + this.BeamVisibleReflectanceBack.GetHashCode();
                if (this.DiffuseVisibleTransmittance != null)
                    hashCode = hashCode * 59 + this.DiffuseVisibleTransmittance.GetHashCode();
                if (this.DiffuseVisibleReflectance != null)
                    hashCode = hashCode * 59 + this.DiffuseVisibleReflectance.GetHashCode();
                if (this.DiffuseVisibleReflectanceBack != null)
                    hashCode = hashCode * 59 + this.DiffuseVisibleReflectanceBack.GetHashCode();
                if (this.InfraredTransmittance != null)
                    hashCode = hashCode * 59 + this.InfraredTransmittance.GetHashCode();
                if (this.Emissivity != null)
                    hashCode = hashCode * 59 + this.Emissivity.GetHashCode();
                if (this.EmissivityBack != null)
                    hashCode = hashCode * 59 + this.EmissivityBack.GetHashCode();
                if (this.DistanceToGlass != null)
                    hashCode = hashCode * 59 + this.DistanceToGlass.GetHashCode();
                if (this.TopOpeningMultiplier != null)
                    hashCode = hashCode * 59 + this.TopOpeningMultiplier.GetHashCode();
                if (this.BottomOpeningMultiplier != null)
                    hashCode = hashCode * 59 + this.BottomOpeningMultiplier.GetHashCode();
                if (this.LeftOpeningMultiplier != null)
                    hashCode = hashCode * 59 + this.LeftOpeningMultiplier.GetHashCode();
                if (this.RightOpeningMultiplier != null)
                    hashCode = hashCode * 59 + this.RightOpeningMultiplier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^EnergyWindowMaterialBlind$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }


            
            // SlatWidth (double) maximum
            if(this.SlatWidth > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlatWidth, must be a value less than or equal to 1.", new [] { "SlatWidth" });
            }


            
            // SlatSeparation (double) maximum
            if(this.SlatSeparation > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlatSeparation, must be a value less than or equal to 1.", new [] { "SlatSeparation" });
            }


            
            // SlatThickness (double) maximum
            if(this.SlatThickness > (double)0.1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlatThickness, must be a value less than or equal to 0.1.", new [] { "SlatThickness" });
            }


            
            // SlatAngle (double) maximum
            if(this.SlatAngle > (double)180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlatAngle, must be a value less than or equal to 180.", new [] { "SlatAngle" });
            }

            // SlatAngle (double) minimum
            if(this.SlatAngle < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlatAngle, must be a value greater than or equal to 0.", new [] { "SlatAngle" });
            }


            
            // BeamSolarTransmittance (double) minimum
            if(this.BeamSolarTransmittance < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamSolarTransmittance, must be a value greater than or equal to 0.", new [] { "BeamSolarTransmittance" });
            }


            
            // BeamSolarReflectance (double) minimum
            if(this.BeamSolarReflectance < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamSolarReflectance, must be a value greater than or equal to 0.", new [] { "BeamSolarReflectance" });
            }


            
            // BeamSolarReflectanceBack (double) minimum
            if(this.BeamSolarReflectanceBack < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamSolarReflectanceBack, must be a value greater than or equal to 0.", new [] { "BeamSolarReflectanceBack" });
            }


            
            // DiffuseSolarTransmittance (double) minimum
            if(this.DiffuseSolarTransmittance < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseSolarTransmittance, must be a value greater than or equal to 0.", new [] { "DiffuseSolarTransmittance" });
            }


            
            // DiffuseSolarReflectance (double) minimum
            if(this.DiffuseSolarReflectance < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseSolarReflectance, must be a value greater than or equal to 0.", new [] { "DiffuseSolarReflectance" });
            }


            
            // DiffuseSolarReflectanceBack (double) minimum
            if(this.DiffuseSolarReflectanceBack < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseSolarReflectanceBack, must be a value greater than or equal to 0.", new [] { "DiffuseSolarReflectanceBack" });
            }


            
            // BeamVisibleTransmittance (double) minimum
            if(this.BeamVisibleTransmittance < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamVisibleTransmittance, must be a value greater than or equal to 0.", new [] { "BeamVisibleTransmittance" });
            }


            
            // BeamVisibleReflectance (double) minimum
            if(this.BeamVisibleReflectance < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamVisibleReflectance, must be a value greater than or equal to 0.", new [] { "BeamVisibleReflectance" });
            }


            
            // BeamVisibleReflectanceBack (double) minimum
            if(this.BeamVisibleReflectanceBack < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamVisibleReflectanceBack, must be a value greater than or equal to 0.", new [] { "BeamVisibleReflectanceBack" });
            }


            
            // DiffuseVisibleTransmittance (double) minimum
            if(this.DiffuseVisibleTransmittance < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseVisibleTransmittance, must be a value greater than or equal to 0.", new [] { "DiffuseVisibleTransmittance" });
            }


            
            // DiffuseVisibleReflectance (double) minimum
            if(this.DiffuseVisibleReflectance < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseVisibleReflectance, must be a value greater than or equal to 0.", new [] { "DiffuseVisibleReflectance" });
            }


            
            // DiffuseVisibleReflectanceBack (double) minimum
            if(this.DiffuseVisibleReflectanceBack < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseVisibleReflectanceBack, must be a value greater than or equal to 0.", new [] { "DiffuseVisibleReflectanceBack" });
            }


            
            // InfraredTransmittance (double) minimum
            if(this.InfraredTransmittance < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InfraredTransmittance, must be a value greater than or equal to 0.", new [] { "InfraredTransmittance" });
            }


            
            // Emissivity (double) minimum
            if(this.Emissivity < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Emissivity, must be a value greater than or equal to 0.", new [] { "Emissivity" });
            }


            
            // EmissivityBack (double) minimum
            if(this.EmissivityBack < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmissivityBack, must be a value greater than or equal to 0.", new [] { "EmissivityBack" });
            }


            
            // DistanceToGlass (double) maximum
            if(this.DistanceToGlass > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DistanceToGlass, must be a value less than or equal to 1.", new [] { "DistanceToGlass" });
            }

            // DistanceToGlass (double) minimum
            if(this.DistanceToGlass < (double)0.01)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DistanceToGlass, must be a value greater than or equal to 0.01.", new [] { "DistanceToGlass" });
            }


            
            // TopOpeningMultiplier (double) maximum
            if(this.TopOpeningMultiplier > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopOpeningMultiplier, must be a value less than or equal to 1.", new [] { "TopOpeningMultiplier" });
            }

            // TopOpeningMultiplier (double) minimum
            if(this.TopOpeningMultiplier < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopOpeningMultiplier, must be a value greater than or equal to 0.", new [] { "TopOpeningMultiplier" });
            }


            
            // BottomOpeningMultiplier (double) maximum
            if(this.BottomOpeningMultiplier > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BottomOpeningMultiplier, must be a value less than or equal to 1.", new [] { "BottomOpeningMultiplier" });
            }

            // BottomOpeningMultiplier (double) minimum
            if(this.BottomOpeningMultiplier < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BottomOpeningMultiplier, must be a value greater than or equal to 0.", new [] { "BottomOpeningMultiplier" });
            }


            
            // LeftOpeningMultiplier (double) maximum
            if(this.LeftOpeningMultiplier > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LeftOpeningMultiplier, must be a value less than or equal to 1.", new [] { "LeftOpeningMultiplier" });
            }

            // LeftOpeningMultiplier (double) minimum
            if(this.LeftOpeningMultiplier < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LeftOpeningMultiplier, must be a value greater than or equal to 0.", new [] { "LeftOpeningMultiplier" });
            }


            
            // RightOpeningMultiplier (double) maximum
            if(this.RightOpeningMultiplier > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RightOpeningMultiplier, must be a value less than or equal to 1.", new [] { "RightOpeningMultiplier" });
            }

            // RightOpeningMultiplier (double) minimum
            if(this.RightOpeningMultiplier < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RightOpeningMultiplier, must be a value greater than or equal to 0.", new [] { "RightOpeningMultiplier" });
            }

            yield break;
        }
    }
}
