/* 
 * Honeybee Validation Report Schema
 *
 * Honeybee validation-report schema.
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace HoneybeeSchema
{
    /// <summary>
    /// ValidationReport
    /// </summary>
    [Serializable]
    [DataContract(Name = "ValidationReport")]
    public partial class ValidationReport : OpenAPIGenBaseModel, IEquatable<ValidationReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidationReport() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "ValidationReport";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidationReport" /> class.
        /// </summary>
        /// <param name="honeybeeCore">Text string for the version of honeybee-core that performed the validation. (required).</param>
        /// <param name="honeybeeSchema">Text string for the version of honeybee-schema that performed the validation. (required).</param>
        /// <param name="valid">Boolean to note whether the Model is valid or not. (required).</param>
        /// <param name="fatalError">A text string containing an exception if the Model failed to serialize. It will be an empty string if serialization was successful. (default to &quot;&quot;).</param>
        /// <param name="errors">A list of objects for each error that was discovered in the model. This will be an empty list or None if no errors were found..</param>
        public ValidationReport
        (
           string honeybeeCore, string honeybeeSchema, bool valid, // Required parameters
           string fatalError = "", List<ValidationError> errors= default// Optional parameters
        )// BaseClass
        {
            // to ensure "honeybeeCore" is required (not null)
            this.HoneybeeCore = honeybeeCore ?? throw new ArgumentNullException("honeybeeCore is a required property for ValidationReport and cannot be null");
            // to ensure "honeybeeSchema" is required (not null)
            this.HoneybeeSchema = honeybeeSchema ?? throw new ArgumentNullException("honeybeeSchema is a required property for ValidationReport and cannot be null");
            this.Valid = valid;
            // use default value if no "fatalError" provided
            this.FatalError = fatalError ?? "";
            this.Errors = errors;

            // Set non-required readonly properties with defaultValue
            this.Type = "ValidationReport";

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof(ValidationReport))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "ValidationReport";

        /// <summary>
        /// Text string for the version of honeybee-core that performed the validation.
        /// </summary>
        /// <value>Text string for the version of honeybee-core that performed the validation.</value>
        [DataMember(Name = "honeybee_core", IsRequired = true)]
        public string HoneybeeCore { get; set; } 
        /// <summary>
        /// Text string for the version of honeybee-schema that performed the validation.
        /// </summary>
        /// <value>Text string for the version of honeybee-schema that performed the validation.</value>
        [DataMember(Name = "honeybee_schema", IsRequired = true)]
        public string HoneybeeSchema { get; set; } 
        /// <summary>
        /// Boolean to note whether the Model is valid or not.
        /// </summary>
        /// <value>Boolean to note whether the Model is valid or not.</value>
        [DataMember(Name = "valid", IsRequired = true)]
        public bool Valid { get; set; } 
        /// <summary>
        /// A text string containing an exception if the Model failed to serialize. It will be an empty string if serialization was successful.
        /// </summary>
        /// <value>A text string containing an exception if the Model failed to serialize. It will be an empty string if serialization was successful.</value>
        [DataMember(Name = "fatal_error")]
        public string FatalError { get; set; }  = "";
        /// <summary>
        /// A list of objects for each error that was discovered in the model. This will be an empty list or None if no errors were found.
        /// </summary>
        /// <value>A list of objects for each error that was discovered in the model. This will be an empty list or None if no errors were found.</value>
        [DataMember(Name = "errors")]
        public List<ValidationError> Errors { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "ValidationReport";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("ValidationReport:\n");
            sb.Append("  HoneybeeCore: ").Append(HoneybeeCore).Append("\n");
            sb.Append("  HoneybeeSchema: ").Append(HoneybeeSchema).Append("\n");
            sb.Append("  Valid: ").Append(Valid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FatalError: ").Append(FatalError).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>ValidationReport object</returns>
        public static ValidationReport FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<ValidationReport>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>ValidationReport object</returns>
        public virtual ValidationReport DuplicateValidationReport()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateValidationReport();
        }

     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as ValidationReport);
        }

        /// <summary>
        /// Returns true if ValidationReport instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidationReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidationReport input)
        {
            if (input == null)
                return false;
            return 
                (
                    Extension.Equals(this.HoneybeeCore, input.HoneybeeCore)
                ) && 
                (
                    Extension.Equals(this.HoneybeeSchema, input.HoneybeeSchema)
                ) && 
                (
                    Extension.Equals(this.Valid, input.Valid)
                ) && 
                (
                    Extension.Equals(this.Type, input.Type)
                ) && 
                (
                    Extension.Equals(this.FatalError, input.FatalError)
                ) && 
                (
                    this.Errors == input.Errors ||
                    Extension.AllEquals(this.Errors, input.Errors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.HoneybeeCore != null)
                    hashCode = hashCode * 59 + this.HoneybeeCore.GetHashCode();
                if (this.HoneybeeSchema != null)
                    hashCode = hashCode * 59 + this.HoneybeeSchema.GetHashCode();
                if (this.Valid != null)
                    hashCode = hashCode * 59 + this.Valid.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FatalError != null)
                    hashCode = hashCode * 59 + this.FatalError.GetHashCode();
                if (this.Errors != null)
                    hashCode = hashCode * 59 + this.Errors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // HoneybeeCore (string) pattern
            Regex regexHoneybeeCore = new Regex(@"([0-9]+)\.([0-9]+)\.([0-9]+)", RegexOptions.CultureInvariant);
            if (this.HoneybeeCore != null && false == regexHoneybeeCore.Match(this.HoneybeeCore).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HoneybeeCore, must match a pattern of " + regexHoneybeeCore, new [] { "HoneybeeCore" });
            }


            
            // HoneybeeSchema (string) pattern
            Regex regexHoneybeeSchema = new Regex(@"([0-9]+)\.([0-9]+)\.([0-9]+)", RegexOptions.CultureInvariant);
            if (this.HoneybeeSchema != null && false == regexHoneybeeSchema.Match(this.HoneybeeSchema).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HoneybeeSchema, must match a pattern of " + regexHoneybeeSchema, new [] { "HoneybeeSchema" });
            }


            
            // Type (string) pattern
            Regex regexType = new Regex(@"^ValidationReport$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
