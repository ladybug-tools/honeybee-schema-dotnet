/* 
 * Honeybee Project Information Schema
 *
 * Documentation for Honeybee project-information schema
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

extern alias LBTNewtonSoft; using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBTNewtonSoft::Newtonsoft.Json;
using LBTNewtonSoft::Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace HoneybeeSchema
{
    /// <summary>
    /// Project information.
    /// </summary>
    [Summary(@"Project information.")]
    [Serializable]
    [DataContract(Name = "ProjectInfo")]
    public partial class ProjectInfo : OpenAPIGenBaseModel, IEquatable<ProjectInfo>, IValidatableObject
    {
        /// <summary>
        /// Project location climate zone.
        /// </summary>
        /// <value>Project location climate zone.</value>
        [Summary(@"Project location climate zone.")]
        [DataMember(Name="ashrae_climate_zone")]
        public ClimateZones AshraeClimateZone { get; set; }   
        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectInfo" /> class.
        /// </summary>
        /// <param name="north">A number between -360 to 360 where positive values rotate the compass counterclockwise (towards the West) and negative values rotate the compass clockwise (towards the East). (default to 0D).</param>
        /// <param name="weatherUrls">A list of URLs to zip files that includes EPW, DDY and STAT files. You can find these URLs from the EPWMAP. The first URL will be used as the primary weather file..</param>
        /// <param name="location">Project location. This value is usually generated from the information in the weather files..</param>
        /// <param name="ashraeClimateZone">Project location climate zone..</param>
        /// <param name="buildingType">A list of building types for the project. The first building type is considered the primary type for the project..</param>
        /// <param name="vintage">A list of building vintages (e.g. ASHRAE_2019, ASHRAE_2016)..</param>
        public ProjectInfo
        (
            // Required parameters
           double north = 0D, List<string> weatherUrls= default, Location location= default, ClimateZones ashraeClimateZone= default, List<BuildingTypes> buildingType= default, List<EfficiencyStandards> vintage= default// Optional parameters
        ) : base()// BaseClass
        {
            this.North = north;
            this.WeatherUrls = weatherUrls;
            this.Location = location;
            this.AshraeClimateZone = ashraeClimateZone;
            this.BuildingType = buildingType;
            this.Vintage = vintage;

            // Set non-required readonly properties with defaultValue
            this.Type = "ProjectInfo";

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof(ProjectInfo))
                this.IsValid(throwException: true);
        }

        //============================================== is ReadOnly 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Summary(@"Type")]
        [DataMember(Name = "type")]
        public override string Type { get; protected set; }  = "ProjectInfo";

        /// <summary>
        /// A number between -360 to 360 where positive values rotate the compass counterclockwise (towards the West) and negative values rotate the compass clockwise (towards the East).
        /// </summary>
        /// <value>A number between -360 to 360 where positive values rotate the compass counterclockwise (towards the West) and negative values rotate the compass clockwise (towards the East).</value>
        [Summary(@"A number between -360 to 360 where positive values rotate the compass counterclockwise (towards the West) and negative values rotate the compass clockwise (towards the East).")]
        [DataMember(Name = "north")]
        public double North { get; set; }  = 0D;
        /// <summary>
        /// A list of URLs to zip files that includes EPW, DDY and STAT files. You can find these URLs from the EPWMAP. The first URL will be used as the primary weather file.
        /// </summary>
        /// <value>A list of URLs to zip files that includes EPW, DDY and STAT files. You can find these URLs from the EPWMAP. The first URL will be used as the primary weather file.</value>
        [Summary(@"A list of URLs to zip files that includes EPW, DDY and STAT files. You can find these URLs from the EPWMAP. The first URL will be used as the primary weather file.")]
        [DataMember(Name = "weather_urls")]
        public List<string> WeatherUrls { get; set; } 
        /// <summary>
        /// Project location. This value is usually generated from the information in the weather files.
        /// </summary>
        /// <value>Project location. This value is usually generated from the information in the weather files.</value>
        [Summary(@"Project location. This value is usually generated from the information in the weather files.")]
        [DataMember(Name = "location")]
        public Location Location { get; set; } 
        /// <summary>
        /// A list of building types for the project. The first building type is considered the primary type for the project.
        /// </summary>
        /// <value>A list of building types for the project. The first building type is considered the primary type for the project.</value>
        [Summary(@"A list of building types for the project. The first building type is considered the primary type for the project.")]
        [DataMember(Name = "building_type")]
        public List<BuildingTypes> BuildingType { get; set; } 
        /// <summary>
        /// A list of building vintages (e.g. ASHRAE_2019, ASHRAE_2016).
        /// </summary>
        /// <value>A list of building vintages (e.g. ASHRAE_2019, ASHRAE_2016).</value>
        [Summary(@"A list of building vintages (e.g. ASHRAE_2019, ASHRAE_2016).")]
        [DataMember(Name = "vintage")]
        public List<EfficiencyStandards> Vintage { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "ProjectInfo";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("ProjectInfo:\n");
            sb.Append("  Type: ").Append(this.Type).Append("\n");
            sb.Append("  North: ").Append(this.North).Append("\n");
            sb.Append("  WeatherUrls: ").Append(this.WeatherUrls).Append("\n");
            sb.Append("  Location: ").Append(this.Location).Append("\n");
            sb.Append("  AshraeClimateZone: ").Append(this.AshraeClimateZone).Append("\n");
            sb.Append("  BuildingType: ").Append(this.BuildingType).Append("\n");
            sb.Append("  Vintage: ").Append(this.Vintage).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>ProjectInfo object</returns>
        public static ProjectInfo FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<ProjectInfo>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>ProjectInfo object</returns>
        public virtual ProjectInfo DuplicateProjectInfo()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateProjectInfo();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel DuplicateOpenAPIGenBaseModel()
        {
            return DuplicateProjectInfo();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as ProjectInfo);
        }

        /// <summary>
        /// Returns true if ProjectInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ProjectInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectInfo input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                    Extension.Equals(this.Type, input.Type) && 
                    Extension.Equals(this.North, input.North) && 
                (
                    this.WeatherUrls == input.WeatherUrls ||
                    Extension.AllEquals(this.WeatherUrls, input.WeatherUrls)
                ) && 
                    Extension.Equals(this.Location, input.Location) && 
                    Extension.Equals(this.AshraeClimateZone, input.AshraeClimateZone) && 
                (
                    this.BuildingType == input.BuildingType ||
                    Extension.AllEquals(this.BuildingType, input.BuildingType)
                ) && 
                (
                    this.Vintage == input.Vintage ||
                    Extension.AllEquals(this.Vintage, input.Vintage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.North != null)
                    hashCode = hashCode * 59 + this.North.GetHashCode();
                if (this.WeatherUrls != null)
                    hashCode = hashCode * 59 + this.WeatherUrls.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.AshraeClimateZone != null)
                    hashCode = hashCode * 59 + this.AshraeClimateZone.GetHashCode();
                if (this.BuildingType != null)
                    hashCode = hashCode * 59 + this.BuildingType.GetHashCode();
                if (this.Vintage != null)
                    hashCode = hashCode * 59 + this.Vintage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^ProjectInfo$", RegexOptions.CultureInvariant);
            if (this.Type != null && false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }


            
            // North (double) maximum
            if(this.North > (double)360)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for North, must be a value less than or equal to 360.", new [] { "North" });
            }

            // North (double) minimum
            if(this.North < (double)-360)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for North, must be a value greater than or equal to -360.", new [] { "North" });
            }

            yield break;
        }
    }
}
