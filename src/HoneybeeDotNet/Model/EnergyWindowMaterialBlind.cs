/* 
 * Honeybee Model Schema
 *
 * This is the documentation for Honeybee model schema.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HoneybeeDotNet.Client.OpenAPIDateConverter;

namespace HoneybeeDotNet.Model
{
    /// <summary>
    /// Window blind properties.  Window blind properties consist of flat, equally-spaced slats.
    /// </summary>
    [DataContract]
    public partial class EnergyWindowMaterialBlind :  IEquatable<EnergyWindowMaterialBlind>, IValidatableObject
    {
        /// <summary>
        /// Defines SlatOrientation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SlatOrientationEnum
        {
            /// <summary>
            /// Enum Horizontal for value: Horizontal
            /// </summary>
            [EnumMember(Value = "Horizontal")]
            Horizontal = 1,

            /// <summary>
            /// Enum Vertical for value: Vertical
            /// </summary>
            [EnumMember(Value = "Vertical")]
            Vertical = 2,

            /// <summary>
            /// Enum ChoicesincludeHorizontalandVerticalHorizontalmeanstheslatsareparalleltotheXAxisofthewindowVerticalmeanstheslatsareparalleltotheYAxisofthewindow for value: Choices include Horizontal and Vertical. Horizontal means the slats are parallel to the X-axis of the window. Vertical means the slats are parallel to the Y-axis of the window.
            /// </summary>
            [EnumMember(Value = "Choices include Horizontal and Vertical. Horizontal means the slats are parallel to the X-axis of the window. Vertical means the slats are parallel to the Y-axis of the window.")]
            ChoicesincludeHorizontalandVerticalHorizontalmeanstheslatsareparalleltotheXAxisofthewindowVerticalmeanstheslatsareparalleltotheYAxisofthewindow = 3

        }

        /// <summary>
        /// Gets or Sets SlatOrientation
        /// </summary>
        [DataMember(Name="slat_orientation", EmitDefaultValue=false)]
        public SlatOrientationEnum? SlatOrientation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyWindowMaterialBlind" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyWindowMaterialBlind() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyWindowMaterialBlind" /> class.
        /// </summary>
        /// <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
        /// <param name="type">type (default to &quot;EnergyWindowMaterialBlind&quot;).</param>
        /// <param name="slatOrientation">slatOrientation (default to SlatOrientationEnum.Horizontal).</param>
        /// <param name="slatWidth">The width of slat measured from edge to edge in meters. (default to 0.025M).</param>
        /// <param name="slatSeparation">The distance between the front of a slat and the back of the adjacent slat in meters. (default to 0.01875M).</param>
        /// <param name="slatThickness">The distance between the faces of a slat in meters. The default value is 0.001. (default to 0.001M).</param>
        /// <param name="slatAngle">The angle (degrees) between the glazing outward normal and the slat outward normal where the outward normal points away from the front face of the slat (degrees). The default value is 45. (default to 45M).</param>
        /// <param name="slatConductivity">The thermal conductivity of the slat in W/(m-K). Default value is 221. (default to 221M).</param>
        /// <param name="beamSolarTransmittance">The beam solar transmittance of the slat, assumed to be independent of angle of incidence on the slat. Any transmitted beam radiation is assumed to be 100% diffuse (i.e., slats are translucent). The default value is 0. (default to 0M).</param>
        /// <param name="beamSolarReflectance">The beam solar reflectance of the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5M).</param>
        /// <param name="beamSolarReflectanceBack">The beam solar reflectance of the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5M).</param>
        /// <param name="diffuseSolarTransmittance">The slat transmittance for hemisperically diffuse solar radiation. Default value is 0. (default to 0M).</param>
        /// <param name="diffuseSolarReflectance">The front-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5. (default to 0.5M).</param>
        /// <param name="diffuseSolarReflectanceBack">The back-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5. (default to 0.5M).</param>
        /// <param name="beamVisibleTransmittance">The beam visible transmittance of the slat, it is assumed to be independent of the angle of incidence. Default value is 0. (default to 0M).</param>
        /// <param name="beamVisibleReflectance">The beam visible reflectance on the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5M).</param>
        /// <param name="beamVisibleReflectanceBack">The beam visible reflectance on the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5. (default to 0.5M).</param>
        /// <param name="diffuseVisibleTransmittance">The slat transmittance for hemispherically diffuse visible radiation. This value should equal “Slat Beam Visible Transmittance.” (default to 0M).</param>
        /// <param name="diffuseVisibleReflectance">The front-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Front Side Slat Beam Visible Reflectance.” Default value is 0.5. (default to 0.5M).</param>
        /// <param name="diffuseVisibleReflectanceBack">The back-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Back Side Slat Beam Visible Reflectance. Default value is 0.5.” (default to 0.5M).</param>
        /// <param name="infraredTransmittance">The slat infrared hemispherical transmittance. It is zero for solid metallic, wooden or glass slats, but may be non-zero in some cases such as for thin plastic slats. The default value is 0. (default to 0M).</param>
        /// <param name="emissivity">Front side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9. (default to 0.9M).</param>
        /// <param name="emissivityBack">Back side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9. (default to 0.9M).</param>
        /// <param name="distanceToGlass">The distance from the mid-plane of the blind to the adjacent glass in meters. The default value is 0.05. (default to 0.05M).</param>
        /// <param name="topOpeningMultiplier">The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. The default value is 0.5 (default to 0.5M).</param>
        /// <param name="bottomOpeningMultiplier">The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. The default value is 0. (default to 0.5M).</param>
        /// <param name="leftOpeningMultiplier">The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. The default value is 0.5. (default to 0.5M).</param>
        /// <param name="rightOpeningMultiplier">The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. The default value is 0.5. (default to 0.5M).</param>
        public EnergyWindowMaterialBlind(string name, string type = "EnergyWindowMaterialBlind", SlatOrientationEnum? slatOrientation = SlatOrientationEnum.Horizontal, decimal slatWidth = 0.025M, decimal slatSeparation = 0.01875M, decimal slatThickness = 0.001M, decimal slatAngle = 45M, decimal slatConductivity = 221M, decimal beamSolarTransmittance = 0M, decimal beamSolarReflectance = 0.5M, decimal beamSolarReflectanceBack = 0.5M, decimal diffuseSolarTransmittance = 0M, decimal diffuseSolarReflectance = 0.5M, decimal diffuseSolarReflectanceBack = 0.5M, decimal beamVisibleTransmittance = 0M, decimal beamVisibleReflectance = 0.5M, decimal beamVisibleReflectanceBack = 0.5M, decimal diffuseVisibleTransmittance = 0M, decimal diffuseVisibleReflectance = 0.5M, decimal diffuseVisibleReflectanceBack = 0.5M, decimal infraredTransmittance = 0M, decimal emissivity = 0.9M, decimal emissivityBack = 0.9M, decimal distanceToGlass = 0.05M, decimal topOpeningMultiplier = 0.5M, decimal bottomOpeningMultiplier = 0.5M, decimal leftOpeningMultiplier = 0.5M, decimal rightOpeningMultiplier = 0.5M)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for EnergyWindowMaterialBlind and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = "EnergyWindowMaterialBlind";
            }
            else
            {
                this.Type = type;
            }
            // use default value if no "slatOrientation" provided
            if (slatOrientation == null)
            {
                this.SlatOrientation = SlatOrientationEnum.Horizontal;
            }
            else
            {
                this.SlatOrientation = slatOrientation;
            }
            // use default value if no "slatWidth" provided
            if (slatWidth == null)
            {
                this.SlatWidth = 0.025M;
            }
            else
            {
                this.SlatWidth = slatWidth;
            }
            // use default value if no "slatSeparation" provided
            if (slatSeparation == null)
            {
                this.SlatSeparation = 0.01875M;
            }
            else
            {
                this.SlatSeparation = slatSeparation;
            }
            // use default value if no "slatThickness" provided
            if (slatThickness == null)
            {
                this.SlatThickness = 0.001M;
            }
            else
            {
                this.SlatThickness = slatThickness;
            }
            // use default value if no "slatAngle" provided
            if (slatAngle == null)
            {
                this.SlatAngle = 45M;
            }
            else
            {
                this.SlatAngle = slatAngle;
            }
            // use default value if no "slatConductivity" provided
            if (slatConductivity == null)
            {
                this.SlatConductivity = 221M;
            }
            else
            {
                this.SlatConductivity = slatConductivity;
            }
            // use default value if no "beamSolarTransmittance" provided
            if (beamSolarTransmittance == null)
            {
                this.BeamSolarTransmittance = 0M;
            }
            else
            {
                this.BeamSolarTransmittance = beamSolarTransmittance;
            }
            // use default value if no "beamSolarReflectance" provided
            if (beamSolarReflectance == null)
            {
                this.BeamSolarReflectance = 0.5M;
            }
            else
            {
                this.BeamSolarReflectance = beamSolarReflectance;
            }
            // use default value if no "beamSolarReflectanceBack" provided
            if (beamSolarReflectanceBack == null)
            {
                this.BeamSolarReflectanceBack = 0.5M;
            }
            else
            {
                this.BeamSolarReflectanceBack = beamSolarReflectanceBack;
            }
            // use default value if no "diffuseSolarTransmittance" provided
            if (diffuseSolarTransmittance == null)
            {
                this.DiffuseSolarTransmittance = 0M;
            }
            else
            {
                this.DiffuseSolarTransmittance = diffuseSolarTransmittance;
            }
            // use default value if no "diffuseSolarReflectance" provided
            if (diffuseSolarReflectance == null)
            {
                this.DiffuseSolarReflectance = 0.5M;
            }
            else
            {
                this.DiffuseSolarReflectance = diffuseSolarReflectance;
            }
            // use default value if no "diffuseSolarReflectanceBack" provided
            if (diffuseSolarReflectanceBack == null)
            {
                this.DiffuseSolarReflectanceBack = 0.5M;
            }
            else
            {
                this.DiffuseSolarReflectanceBack = diffuseSolarReflectanceBack;
            }
            // use default value if no "beamVisibleTransmittance" provided
            if (beamVisibleTransmittance == null)
            {
                this.BeamVisibleTransmittance = 0M;
            }
            else
            {
                this.BeamVisibleTransmittance = beamVisibleTransmittance;
            }
            // use default value if no "beamVisibleReflectance" provided
            if (beamVisibleReflectance == null)
            {
                this.BeamVisibleReflectance = 0.5M;
            }
            else
            {
                this.BeamVisibleReflectance = beamVisibleReflectance;
            }
            // use default value if no "beamVisibleReflectanceBack" provided
            if (beamVisibleReflectanceBack == null)
            {
                this.BeamVisibleReflectanceBack = 0.5M;
            }
            else
            {
                this.BeamVisibleReflectanceBack = beamVisibleReflectanceBack;
            }
            // use default value if no "diffuseVisibleTransmittance" provided
            if (diffuseVisibleTransmittance == null)
            {
                this.DiffuseVisibleTransmittance = 0M;
            }
            else
            {
                this.DiffuseVisibleTransmittance = diffuseVisibleTransmittance;
            }
            // use default value if no "diffuseVisibleReflectance" provided
            if (diffuseVisibleReflectance == null)
            {
                this.DiffuseVisibleReflectance = 0.5M;
            }
            else
            {
                this.DiffuseVisibleReflectance = diffuseVisibleReflectance;
            }
            // use default value if no "diffuseVisibleReflectanceBack" provided
            if (diffuseVisibleReflectanceBack == null)
            {
                this.DiffuseVisibleReflectanceBack = 0.5M;
            }
            else
            {
                this.DiffuseVisibleReflectanceBack = diffuseVisibleReflectanceBack;
            }
            // use default value if no "infraredTransmittance" provided
            if (infraredTransmittance == null)
            {
                this.InfraredTransmittance = 0M;
            }
            else
            {
                this.InfraredTransmittance = infraredTransmittance;
            }
            // use default value if no "emissivity" provided
            if (emissivity == null)
            {
                this.Emissivity = 0.9M;
            }
            else
            {
                this.Emissivity = emissivity;
            }
            // use default value if no "emissivityBack" provided
            if (emissivityBack == null)
            {
                this.EmissivityBack = 0.9M;
            }
            else
            {
                this.EmissivityBack = emissivityBack;
            }
            // use default value if no "distanceToGlass" provided
            if (distanceToGlass == null)
            {
                this.DistanceToGlass = 0.05M;
            }
            else
            {
                this.DistanceToGlass = distanceToGlass;
            }
            // use default value if no "topOpeningMultiplier" provided
            if (topOpeningMultiplier == null)
            {
                this.TopOpeningMultiplier = 0.5M;
            }
            else
            {
                this.TopOpeningMultiplier = topOpeningMultiplier;
            }
            // use default value if no "bottomOpeningMultiplier" provided
            if (bottomOpeningMultiplier == null)
            {
                this.BottomOpeningMultiplier = 0.5M;
            }
            else
            {
                this.BottomOpeningMultiplier = bottomOpeningMultiplier;
            }
            // use default value if no "leftOpeningMultiplier" provided
            if (leftOpeningMultiplier == null)
            {
                this.LeftOpeningMultiplier = 0.5M;
            }
            else
            {
                this.LeftOpeningMultiplier = leftOpeningMultiplier;
            }
            // use default value if no "rightOpeningMultiplier" provided
            if (rightOpeningMultiplier == null)
            {
                this.RightOpeningMultiplier = 0.5M;
            }
            else
            {
                this.RightOpeningMultiplier = rightOpeningMultiplier;
            }
        }
        
        /// <summary>
        /// Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
        /// </summary>
        /// <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        [JsonProperty("type")]
        public string Type { get; set; }


        /// <summary>
        /// The width of slat measured from edge to edge in meters.
        /// </summary>
        /// <value>The width of slat measured from edge to edge in meters.</value>
        [DataMember(Name="slat_width", EmitDefaultValue=false)]
        [JsonProperty("slat_width")]
        public decimal SlatWidth { get; set; }

        /// <summary>
        /// The distance between the front of a slat and the back of the adjacent slat in meters.
        /// </summary>
        /// <value>The distance between the front of a slat and the back of the adjacent slat in meters.</value>
        [DataMember(Name="slat_separation", EmitDefaultValue=false)]
        [JsonProperty("slat_separation")]
        public decimal SlatSeparation { get; set; }

        /// <summary>
        /// The distance between the faces of a slat in meters. The default value is 0.001.
        /// </summary>
        /// <value>The distance between the faces of a slat in meters. The default value is 0.001.</value>
        [DataMember(Name="slat_thickness", EmitDefaultValue=false)]
        [JsonProperty("slat_thickness")]
        public decimal SlatThickness { get; set; }

        /// <summary>
        /// The angle (degrees) between the glazing outward normal and the slat outward normal where the outward normal points away from the front face of the slat (degrees). The default value is 45.
        /// </summary>
        /// <value>The angle (degrees) between the glazing outward normal and the slat outward normal where the outward normal points away from the front face of the slat (degrees). The default value is 45.</value>
        [DataMember(Name="slat_angle", EmitDefaultValue=false)]
        [JsonProperty("slat_angle")]
        public decimal SlatAngle { get; set; }

        /// <summary>
        /// The thermal conductivity of the slat in W/(m-K). Default value is 221.
        /// </summary>
        /// <value>The thermal conductivity of the slat in W/(m-K). Default value is 221.</value>
        [DataMember(Name="slat_conductivity", EmitDefaultValue=false)]
        [JsonProperty("slat_conductivity")]
        public decimal SlatConductivity { get; set; }

        /// <summary>
        /// The beam solar transmittance of the slat, assumed to be independent of angle of incidence on the slat. Any transmitted beam radiation is assumed to be 100% diffuse (i.e., slats are translucent). The default value is 0.
        /// </summary>
        /// <value>The beam solar transmittance of the slat, assumed to be independent of angle of incidence on the slat. Any transmitted beam radiation is assumed to be 100% diffuse (i.e., slats are translucent). The default value is 0.</value>
        [DataMember(Name="beam_solar_transmittance", EmitDefaultValue=false)]
        [JsonProperty("beam_solar_transmittance")]
        public decimal BeamSolarTransmittance { get; set; }

        /// <summary>
        /// The beam solar reflectance of the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
        /// </summary>
        /// <value>The beam solar reflectance of the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        [DataMember(Name="beam_solar_reflectance", EmitDefaultValue=false)]
        [JsonProperty("beam_solar_reflectance")]
        public decimal BeamSolarReflectance { get; set; }

        /// <summary>
        /// The beam solar reflectance of the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
        /// </summary>
        /// <value>The beam solar reflectance of the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        [DataMember(Name="beam_solar_reflectance_back", EmitDefaultValue=false)]
        [JsonProperty("beam_solar_reflectance_back")]
        public decimal BeamSolarReflectanceBack { get; set; }

        /// <summary>
        /// The slat transmittance for hemisperically diffuse solar radiation. Default value is 0.
        /// </summary>
        /// <value>The slat transmittance for hemisperically diffuse solar radiation. Default value is 0.</value>
        [DataMember(Name="diffuse_solar_transmittance", EmitDefaultValue=false)]
        [JsonProperty("diffuse_solar_transmittance")]
        public decimal DiffuseSolarTransmittance { get; set; }

        /// <summary>
        /// The front-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.
        /// </summary>
        /// <value>The front-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.</value>
        [DataMember(Name="diffuse_solar_reflectance", EmitDefaultValue=false)]
        [JsonProperty("diffuse_solar_reflectance")]
        public decimal DiffuseSolarReflectance { get; set; }

        /// <summary>
        /// The back-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.
        /// </summary>
        /// <value>The back-side slat reflectance for hemispherically diffuse solar radiation. Default value is 0.5.</value>
        [DataMember(Name="diffuse_solar_reflectance_back", EmitDefaultValue=false)]
        [JsonProperty("diffuse_solar_reflectance_back")]
        public decimal DiffuseSolarReflectanceBack { get; set; }

        /// <summary>
        /// The beam visible transmittance of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.
        /// </summary>
        /// <value>The beam visible transmittance of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.</value>
        [DataMember(Name="beam_visible_transmittance", EmitDefaultValue=false)]
        [JsonProperty("beam_visible_transmittance")]
        public decimal BeamVisibleTransmittance { get; set; }

        /// <summary>
        /// The beam visible reflectance on the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
        /// </summary>
        /// <value>The beam visible reflectance on the front side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        [DataMember(Name="beam_visible_reflectance", EmitDefaultValue=false)]
        [JsonProperty("beam_visible_reflectance")]
        public decimal BeamVisibleReflectance { get; set; }

        /// <summary>
        /// The beam visible reflectance on the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.
        /// </summary>
        /// <value>The beam visible reflectance on the back side of the slat, it is assumed to be independent of the angle of incidence. Default value is 0.5.</value>
        [DataMember(Name="beam_visible_reflectance_back", EmitDefaultValue=false)]
        [JsonProperty("beam_visible_reflectance_back")]
        public decimal BeamVisibleReflectanceBack { get; set; }

        /// <summary>
        /// The slat transmittance for hemispherically diffuse visible radiation. This value should equal “Slat Beam Visible Transmittance.”
        /// </summary>
        /// <value>The slat transmittance for hemispherically diffuse visible radiation. This value should equal “Slat Beam Visible Transmittance.”</value>
        [DataMember(Name="diffuse_visible_transmittance", EmitDefaultValue=false)]
        [JsonProperty("diffuse_visible_transmittance")]
        public decimal DiffuseVisibleTransmittance { get; set; }

        /// <summary>
        /// The front-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Front Side Slat Beam Visible Reflectance.” Default value is 0.5.
        /// </summary>
        /// <value>The front-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Front Side Slat Beam Visible Reflectance.” Default value is 0.5.</value>
        [DataMember(Name="diffuse_visible_reflectance", EmitDefaultValue=false)]
        [JsonProperty("diffuse_visible_reflectance")]
        public decimal DiffuseVisibleReflectance { get; set; }

        /// <summary>
        /// The back-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Back Side Slat Beam Visible Reflectance. Default value is 0.5.”
        /// </summary>
        /// <value>The back-side slat reflectance for hemispherically diffuse visible radiation. This value should equal “Back Side Slat Beam Visible Reflectance. Default value is 0.5.”</value>
        [DataMember(Name="diffuse_visible_reflectance_back", EmitDefaultValue=false)]
        [JsonProperty("diffuse_visible_reflectance_back")]
        public decimal DiffuseVisibleReflectanceBack { get; set; }

        /// <summary>
        /// The slat infrared hemispherical transmittance. It is zero for solid metallic, wooden or glass slats, but may be non-zero in some cases such as for thin plastic slats. The default value is 0.
        /// </summary>
        /// <value>The slat infrared hemispherical transmittance. It is zero for solid metallic, wooden or glass slats, but may be non-zero in some cases such as for thin plastic slats. The default value is 0.</value>
        [DataMember(Name="infrared_transmittance", EmitDefaultValue=false)]
        [JsonProperty("infrared_transmittance")]
        public decimal InfraredTransmittance { get; set; }

        /// <summary>
        /// Front side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.
        /// </summary>
        /// <value>Front side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.</value>
        [DataMember(Name="emissivity", EmitDefaultValue=false)]
        [JsonProperty("emissivity")]
        public decimal Emissivity { get; set; }

        /// <summary>
        /// Back side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.
        /// </summary>
        /// <value>Back side hemispherical emissivity of the slat. Default is 0.9 for most materials. The default value is 0.9.</value>
        [DataMember(Name="emissivity_back", EmitDefaultValue=false)]
        [JsonProperty("emissivity_back")]
        public decimal EmissivityBack { get; set; }

        /// <summary>
        /// The distance from the mid-plane of the blind to the adjacent glass in meters. The default value is 0.05.
        /// </summary>
        /// <value>The distance from the mid-plane of the blind to the adjacent glass in meters. The default value is 0.05.</value>
        [DataMember(Name="distance_to_glass", EmitDefaultValue=false)]
        [JsonProperty("distance_to_glass")]
        public decimal DistanceToGlass { get; set; }

        /// <summary>
        /// The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. The default value is 0.5
        /// </summary>
        /// <value>The effective area for air flow at the top of the shade, divided by the horizontal area between glass and shade. The default value is 0.5</value>
        [DataMember(Name="top_opening_multiplier", EmitDefaultValue=false)]
        [JsonProperty("top_opening_multiplier")]
        public decimal TopOpeningMultiplier { get; set; }

        /// <summary>
        /// The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. The default value is 0.
        /// </summary>
        /// <value>The effective area for air flow at the bottom of the shade, divided by the horizontal area between glass and shade. The default value is 0.</value>
        [DataMember(Name="bottom_opening_multiplier", EmitDefaultValue=false)]
        [JsonProperty("bottom_opening_multiplier")]
        public decimal BottomOpeningMultiplier { get; set; }

        /// <summary>
        /// The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.
        /// </summary>
        /// <value>The effective area for air flow at the left side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.</value>
        [DataMember(Name="left_opening_multiplier", EmitDefaultValue=false)]
        [JsonProperty("left_opening_multiplier")]
        public decimal LeftOpeningMultiplier { get; set; }

        /// <summary>
        /// The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.
        /// </summary>
        /// <value>The effective area for air flow at the right side of the shade, divided by the vertical area between glass and shade. The default value is 0.5.</value>
        [DataMember(Name="right_opening_multiplier", EmitDefaultValue=false)]
        [JsonProperty("right_opening_multiplier")]
        public decimal RightOpeningMultiplier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyWindowMaterialBlind {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  SlatOrientation: ").Append(SlatOrientation).Append("\n");
            sb.Append("  SlatWidth: ").Append(SlatWidth).Append("\n");
            sb.Append("  SlatSeparation: ").Append(SlatSeparation).Append("\n");
            sb.Append("  SlatThickness: ").Append(SlatThickness).Append("\n");
            sb.Append("  SlatAngle: ").Append(SlatAngle).Append("\n");
            sb.Append("  SlatConductivity: ").Append(SlatConductivity).Append("\n");
            sb.Append("  BeamSolarTransmittance: ").Append(BeamSolarTransmittance).Append("\n");
            sb.Append("  BeamSolarReflectance: ").Append(BeamSolarReflectance).Append("\n");
            sb.Append("  BeamSolarReflectanceBack: ").Append(BeamSolarReflectanceBack).Append("\n");
            sb.Append("  DiffuseSolarTransmittance: ").Append(DiffuseSolarTransmittance).Append("\n");
            sb.Append("  DiffuseSolarReflectance: ").Append(DiffuseSolarReflectance).Append("\n");
            sb.Append("  DiffuseSolarReflectanceBack: ").Append(DiffuseSolarReflectanceBack).Append("\n");
            sb.Append("  BeamVisibleTransmittance: ").Append(BeamVisibleTransmittance).Append("\n");
            sb.Append("  BeamVisibleReflectance: ").Append(BeamVisibleReflectance).Append("\n");
            sb.Append("  BeamVisibleReflectanceBack: ").Append(BeamVisibleReflectanceBack).Append("\n");
            sb.Append("  DiffuseVisibleTransmittance: ").Append(DiffuseVisibleTransmittance).Append("\n");
            sb.Append("  DiffuseVisibleReflectance: ").Append(DiffuseVisibleReflectance).Append("\n");
            sb.Append("  DiffuseVisibleReflectanceBack: ").Append(DiffuseVisibleReflectanceBack).Append("\n");
            sb.Append("  InfraredTransmittance: ").Append(InfraredTransmittance).Append("\n");
            sb.Append("  Emissivity: ").Append(Emissivity).Append("\n");
            sb.Append("  EmissivityBack: ").Append(EmissivityBack).Append("\n");
            sb.Append("  DistanceToGlass: ").Append(DistanceToGlass).Append("\n");
            sb.Append("  TopOpeningMultiplier: ").Append(TopOpeningMultiplier).Append("\n");
            sb.Append("  BottomOpeningMultiplier: ").Append(BottomOpeningMultiplier).Append("\n");
            sb.Append("  LeftOpeningMultiplier: ").Append(LeftOpeningMultiplier).Append("\n");
            sb.Append("  RightOpeningMultiplier: ").Append(RightOpeningMultiplier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyWindowMaterialBlind);
        }

        /// <summary>
        /// Returns true if EnergyWindowMaterialBlind instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyWindowMaterialBlind to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyWindowMaterialBlind input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.SlatOrientation == input.SlatOrientation ||
                    (this.SlatOrientation != null &&
                    this.SlatOrientation.Equals(input.SlatOrientation))
                ) && 
                (
                    this.SlatWidth == input.SlatWidth ||
                    (this.SlatWidth != null &&
                    this.SlatWidth.Equals(input.SlatWidth))
                ) && 
                (
                    this.SlatSeparation == input.SlatSeparation ||
                    (this.SlatSeparation != null &&
                    this.SlatSeparation.Equals(input.SlatSeparation))
                ) && 
                (
                    this.SlatThickness == input.SlatThickness ||
                    (this.SlatThickness != null &&
                    this.SlatThickness.Equals(input.SlatThickness))
                ) && 
                (
                    this.SlatAngle == input.SlatAngle ||
                    (this.SlatAngle != null &&
                    this.SlatAngle.Equals(input.SlatAngle))
                ) && 
                (
                    this.SlatConductivity == input.SlatConductivity ||
                    (this.SlatConductivity != null &&
                    this.SlatConductivity.Equals(input.SlatConductivity))
                ) && 
                (
                    this.BeamSolarTransmittance == input.BeamSolarTransmittance ||
                    (this.BeamSolarTransmittance != null &&
                    this.BeamSolarTransmittance.Equals(input.BeamSolarTransmittance))
                ) && 
                (
                    this.BeamSolarReflectance == input.BeamSolarReflectance ||
                    (this.BeamSolarReflectance != null &&
                    this.BeamSolarReflectance.Equals(input.BeamSolarReflectance))
                ) && 
                (
                    this.BeamSolarReflectanceBack == input.BeamSolarReflectanceBack ||
                    (this.BeamSolarReflectanceBack != null &&
                    this.BeamSolarReflectanceBack.Equals(input.BeamSolarReflectanceBack))
                ) && 
                (
                    this.DiffuseSolarTransmittance == input.DiffuseSolarTransmittance ||
                    (this.DiffuseSolarTransmittance != null &&
                    this.DiffuseSolarTransmittance.Equals(input.DiffuseSolarTransmittance))
                ) && 
                (
                    this.DiffuseSolarReflectance == input.DiffuseSolarReflectance ||
                    (this.DiffuseSolarReflectance != null &&
                    this.DiffuseSolarReflectance.Equals(input.DiffuseSolarReflectance))
                ) && 
                (
                    this.DiffuseSolarReflectanceBack == input.DiffuseSolarReflectanceBack ||
                    (this.DiffuseSolarReflectanceBack != null &&
                    this.DiffuseSolarReflectanceBack.Equals(input.DiffuseSolarReflectanceBack))
                ) && 
                (
                    this.BeamVisibleTransmittance == input.BeamVisibleTransmittance ||
                    (this.BeamVisibleTransmittance != null &&
                    this.BeamVisibleTransmittance.Equals(input.BeamVisibleTransmittance))
                ) && 
                (
                    this.BeamVisibleReflectance == input.BeamVisibleReflectance ||
                    (this.BeamVisibleReflectance != null &&
                    this.BeamVisibleReflectance.Equals(input.BeamVisibleReflectance))
                ) && 
                (
                    this.BeamVisibleReflectanceBack == input.BeamVisibleReflectanceBack ||
                    (this.BeamVisibleReflectanceBack != null &&
                    this.BeamVisibleReflectanceBack.Equals(input.BeamVisibleReflectanceBack))
                ) && 
                (
                    this.DiffuseVisibleTransmittance == input.DiffuseVisibleTransmittance ||
                    (this.DiffuseVisibleTransmittance != null &&
                    this.DiffuseVisibleTransmittance.Equals(input.DiffuseVisibleTransmittance))
                ) && 
                (
                    this.DiffuseVisibleReflectance == input.DiffuseVisibleReflectance ||
                    (this.DiffuseVisibleReflectance != null &&
                    this.DiffuseVisibleReflectance.Equals(input.DiffuseVisibleReflectance))
                ) && 
                (
                    this.DiffuseVisibleReflectanceBack == input.DiffuseVisibleReflectanceBack ||
                    (this.DiffuseVisibleReflectanceBack != null &&
                    this.DiffuseVisibleReflectanceBack.Equals(input.DiffuseVisibleReflectanceBack))
                ) && 
                (
                    this.InfraredTransmittance == input.InfraredTransmittance ||
                    (this.InfraredTransmittance != null &&
                    this.InfraredTransmittance.Equals(input.InfraredTransmittance))
                ) && 
                (
                    this.Emissivity == input.Emissivity ||
                    (this.Emissivity != null &&
                    this.Emissivity.Equals(input.Emissivity))
                ) && 
                (
                    this.EmissivityBack == input.EmissivityBack ||
                    (this.EmissivityBack != null &&
                    this.EmissivityBack.Equals(input.EmissivityBack))
                ) && 
                (
                    this.DistanceToGlass == input.DistanceToGlass ||
                    (this.DistanceToGlass != null &&
                    this.DistanceToGlass.Equals(input.DistanceToGlass))
                ) && 
                (
                    this.TopOpeningMultiplier == input.TopOpeningMultiplier ||
                    (this.TopOpeningMultiplier != null &&
                    this.TopOpeningMultiplier.Equals(input.TopOpeningMultiplier))
                ) && 
                (
                    this.BottomOpeningMultiplier == input.BottomOpeningMultiplier ||
                    (this.BottomOpeningMultiplier != null &&
                    this.BottomOpeningMultiplier.Equals(input.BottomOpeningMultiplier))
                ) && 
                (
                    this.LeftOpeningMultiplier == input.LeftOpeningMultiplier ||
                    (this.LeftOpeningMultiplier != null &&
                    this.LeftOpeningMultiplier.Equals(input.LeftOpeningMultiplier))
                ) && 
                (
                    this.RightOpeningMultiplier == input.RightOpeningMultiplier ||
                    (this.RightOpeningMultiplier != null &&
                    this.RightOpeningMultiplier.Equals(input.RightOpeningMultiplier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.SlatOrientation != null)
                    hashCode = hashCode * 59 + this.SlatOrientation.GetHashCode();
                if (this.SlatWidth != null)
                    hashCode = hashCode * 59 + this.SlatWidth.GetHashCode();
                if (this.SlatSeparation != null)
                    hashCode = hashCode * 59 + this.SlatSeparation.GetHashCode();
                if (this.SlatThickness != null)
                    hashCode = hashCode * 59 + this.SlatThickness.GetHashCode();
                if (this.SlatAngle != null)
                    hashCode = hashCode * 59 + this.SlatAngle.GetHashCode();
                if (this.SlatConductivity != null)
                    hashCode = hashCode * 59 + this.SlatConductivity.GetHashCode();
                if (this.BeamSolarTransmittance != null)
                    hashCode = hashCode * 59 + this.BeamSolarTransmittance.GetHashCode();
                if (this.BeamSolarReflectance != null)
                    hashCode = hashCode * 59 + this.BeamSolarReflectance.GetHashCode();
                if (this.BeamSolarReflectanceBack != null)
                    hashCode = hashCode * 59 + this.BeamSolarReflectanceBack.GetHashCode();
                if (this.DiffuseSolarTransmittance != null)
                    hashCode = hashCode * 59 + this.DiffuseSolarTransmittance.GetHashCode();
                if (this.DiffuseSolarReflectance != null)
                    hashCode = hashCode * 59 + this.DiffuseSolarReflectance.GetHashCode();
                if (this.DiffuseSolarReflectanceBack != null)
                    hashCode = hashCode * 59 + this.DiffuseSolarReflectanceBack.GetHashCode();
                if (this.BeamVisibleTransmittance != null)
                    hashCode = hashCode * 59 + this.BeamVisibleTransmittance.GetHashCode();
                if (this.BeamVisibleReflectance != null)
                    hashCode = hashCode * 59 + this.BeamVisibleReflectance.GetHashCode();
                if (this.BeamVisibleReflectanceBack != null)
                    hashCode = hashCode * 59 + this.BeamVisibleReflectanceBack.GetHashCode();
                if (this.DiffuseVisibleTransmittance != null)
                    hashCode = hashCode * 59 + this.DiffuseVisibleTransmittance.GetHashCode();
                if (this.DiffuseVisibleReflectance != null)
                    hashCode = hashCode * 59 + this.DiffuseVisibleReflectance.GetHashCode();
                if (this.DiffuseVisibleReflectanceBack != null)
                    hashCode = hashCode * 59 + this.DiffuseVisibleReflectanceBack.GetHashCode();
                if (this.InfraredTransmittance != null)
                    hashCode = hashCode * 59 + this.InfraredTransmittance.GetHashCode();
                if (this.Emissivity != null)
                    hashCode = hashCode * 59 + this.Emissivity.GetHashCode();
                if (this.EmissivityBack != null)
                    hashCode = hashCode * 59 + this.EmissivityBack.GetHashCode();
                if (this.DistanceToGlass != null)
                    hashCode = hashCode * 59 + this.DistanceToGlass.GetHashCode();
                if (this.TopOpeningMultiplier != null)
                    hashCode = hashCode * 59 + this.TopOpeningMultiplier.GetHashCode();
                if (this.BottomOpeningMultiplier != null)
                    hashCode = hashCode * 59 + this.BottomOpeningMultiplier.GetHashCode();
                if (this.LeftOpeningMultiplier != null)
                    hashCode = hashCode * 59 + this.LeftOpeningMultiplier.GetHashCode();
                if (this.RightOpeningMultiplier != null)
                    hashCode = hashCode * 59 + this.RightOpeningMultiplier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Type (string) pattern
            Regex regexType = new Regex(@"^EnergyWindowMaterialBlind$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            // SlatWidth (decimal) maximum
            if(this.SlatWidth > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlatWidth, must be a value less than or equal to 1.", new [] { "SlatWidth" });
            }

            // SlatSeparation (decimal) maximum
            if(this.SlatSeparation > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlatSeparation, must be a value less than or equal to 1.", new [] { "SlatSeparation" });
            }

            // SlatThickness (decimal) maximum
            if(this.SlatThickness > (decimal)0.1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlatThickness, must be a value less than or equal to 0.1.", new [] { "SlatThickness" });
            }

            // SlatAngle (decimal) maximum
            if(this.SlatAngle > (decimal)180)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlatAngle, must be a value less than or equal to 180.", new [] { "SlatAngle" });
            }

            // SlatAngle (decimal) minimum
            if(this.SlatAngle < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SlatAngle, must be a value greater than or equal to 0.", new [] { "SlatAngle" });
            }

            // BeamSolarTransmittance (decimal) minimum
            if(this.BeamSolarTransmittance < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamSolarTransmittance, must be a value greater than or equal to 0.", new [] { "BeamSolarTransmittance" });
            }

            // BeamSolarReflectance (decimal) minimum
            if(this.BeamSolarReflectance < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamSolarReflectance, must be a value greater than or equal to 0.", new [] { "BeamSolarReflectance" });
            }

            // BeamSolarReflectanceBack (decimal) minimum
            if(this.BeamSolarReflectanceBack < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamSolarReflectanceBack, must be a value greater than or equal to 0.", new [] { "BeamSolarReflectanceBack" });
            }

            // DiffuseSolarTransmittance (decimal) minimum
            if(this.DiffuseSolarTransmittance < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseSolarTransmittance, must be a value greater than or equal to 0.", new [] { "DiffuseSolarTransmittance" });
            }

            // DiffuseSolarReflectance (decimal) minimum
            if(this.DiffuseSolarReflectance < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseSolarReflectance, must be a value greater than or equal to 0.", new [] { "DiffuseSolarReflectance" });
            }

            // DiffuseSolarReflectanceBack (decimal) minimum
            if(this.DiffuseSolarReflectanceBack < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseSolarReflectanceBack, must be a value greater than or equal to 0.", new [] { "DiffuseSolarReflectanceBack" });
            }

            // BeamVisibleTransmittance (decimal) minimum
            if(this.BeamVisibleTransmittance < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamVisibleTransmittance, must be a value greater than or equal to 0.", new [] { "BeamVisibleTransmittance" });
            }

            // BeamVisibleReflectance (decimal) minimum
            if(this.BeamVisibleReflectance < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamVisibleReflectance, must be a value greater than or equal to 0.", new [] { "BeamVisibleReflectance" });
            }

            // BeamVisibleReflectanceBack (decimal) minimum
            if(this.BeamVisibleReflectanceBack < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BeamVisibleReflectanceBack, must be a value greater than or equal to 0.", new [] { "BeamVisibleReflectanceBack" });
            }

            // DiffuseVisibleTransmittance (decimal) minimum
            if(this.DiffuseVisibleTransmittance < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseVisibleTransmittance, must be a value greater than or equal to 0.", new [] { "DiffuseVisibleTransmittance" });
            }

            // DiffuseVisibleReflectance (decimal) minimum
            if(this.DiffuseVisibleReflectance < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseVisibleReflectance, must be a value greater than or equal to 0.", new [] { "DiffuseVisibleReflectance" });
            }

            // DiffuseVisibleReflectanceBack (decimal) minimum
            if(this.DiffuseVisibleReflectanceBack < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DiffuseVisibleReflectanceBack, must be a value greater than or equal to 0.", new [] { "DiffuseVisibleReflectanceBack" });
            }

            // InfraredTransmittance (decimal) minimum
            if(this.InfraredTransmittance < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InfraredTransmittance, must be a value greater than or equal to 0.", new [] { "InfraredTransmittance" });
            }

            // Emissivity (decimal) minimum
            if(this.Emissivity < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Emissivity, must be a value greater than or equal to 0.", new [] { "Emissivity" });
            }

            // EmissivityBack (decimal) minimum
            if(this.EmissivityBack < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmissivityBack, must be a value greater than or equal to 0.", new [] { "EmissivityBack" });
            }

            // DistanceToGlass (decimal) maximum
            if(this.DistanceToGlass > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DistanceToGlass, must be a value less than or equal to 1.", new [] { "DistanceToGlass" });
            }

            // DistanceToGlass (decimal) minimum
            if(this.DistanceToGlass < (decimal)0.01)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DistanceToGlass, must be a value greater than or equal to 0.01.", new [] { "DistanceToGlass" });
            }

            // TopOpeningMultiplier (decimal) maximum
            if(this.TopOpeningMultiplier > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopOpeningMultiplier, must be a value less than or equal to 1.", new [] { "TopOpeningMultiplier" });
            }

            // TopOpeningMultiplier (decimal) minimum
            if(this.TopOpeningMultiplier < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TopOpeningMultiplier, must be a value greater than or equal to 0.", new [] { "TopOpeningMultiplier" });
            }

            // BottomOpeningMultiplier (decimal) maximum
            if(this.BottomOpeningMultiplier > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BottomOpeningMultiplier, must be a value less than or equal to 1.", new [] { "BottomOpeningMultiplier" });
            }

            // BottomOpeningMultiplier (decimal) minimum
            if(this.BottomOpeningMultiplier < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BottomOpeningMultiplier, must be a value greater than or equal to 0.", new [] { "BottomOpeningMultiplier" });
            }

            // LeftOpeningMultiplier (decimal) maximum
            if(this.LeftOpeningMultiplier > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LeftOpeningMultiplier, must be a value less than or equal to 1.", new [] { "LeftOpeningMultiplier" });
            }

            // LeftOpeningMultiplier (decimal) minimum
            if(this.LeftOpeningMultiplier < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LeftOpeningMultiplier, must be a value greater than or equal to 0.", new [] { "LeftOpeningMultiplier" });
            }

            // RightOpeningMultiplier (decimal) maximum
            if(this.RightOpeningMultiplier > (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RightOpeningMultiplier, must be a value less than or equal to 1.", new [] { "RightOpeningMultiplier" });
            }

            // RightOpeningMultiplier (decimal) minimum
            if(this.RightOpeningMultiplier < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RightOpeningMultiplier, must be a value greater than or equal to 0.", new [] { "RightOpeningMultiplier" });
            }

            yield break;
        }
    }

}
