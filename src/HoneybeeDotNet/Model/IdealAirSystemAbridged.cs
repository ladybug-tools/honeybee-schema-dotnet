/* 
 * Honeybee Model Schema
 *
 * This is the documentation for Honeybee model schema.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HoneybeeDotNet.Client.OpenAPIDateConverter;

namespace HoneybeeDotNet.Model
{
    /// <summary>
    /// Provides a model for an ideal HVAC system.
    /// </summary>
    [DataContract]
    public partial class IdealAirSystemAbridged :  IEquatable<IdealAirSystemAbridged>, IValidatableObject
    {
        /// <summary>
        /// Text to indicate the type of air-side economizer used on the ideal air system. Economizers will mix in a greater amount of outdoor air to cool the zone (rather than running the cooling system) when the zone needs cooling and the outdoor air is cooler than the zone.
        /// </summary>
        /// <value>Text to indicate the type of air-side economizer used on the ideal air system. Economizers will mix in a greater amount of outdoor air to cool the zone (rather than running the cooling system) when the zone needs cooling and the outdoor air is cooler than the zone.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EconomizerTypeEnum
        {
            /// <summary>
            /// Enum NoEconomizer for value: NoEconomizer
            /// </summary>
            [EnumMember(Value = "NoEconomizer")]
            NoEconomizer = 1,

            /// <summary>
            /// Enum DifferentialDryBulb for value: DifferentialDryBulb
            /// </summary>
            [EnumMember(Value = "DifferentialDryBulb")]
            DifferentialDryBulb = 2,

            /// <summary>
            /// Enum DifferentialEnthalpy for value: DifferentialEnthalpy
            /// </summary>
            [EnumMember(Value = "DifferentialEnthalpy")]
            DifferentialEnthalpy = 3

        }

        /// <summary>
        /// Text to indicate the type of air-side economizer used on the ideal air system. Economizers will mix in a greater amount of outdoor air to cool the zone (rather than running the cooling system) when the zone needs cooling and the outdoor air is cooler than the zone.
        /// </summary>
        /// <value>Text to indicate the type of air-side economizer used on the ideal air system. Economizers will mix in a greater amount of outdoor air to cool the zone (rather than running the cooling system) when the zone needs cooling and the outdoor air is cooler than the zone.</value>
        [DataMember(Name="economizer_type", EmitDefaultValue=false)]
        public EconomizerTypeEnum? EconomizerType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdealAirSystemAbridged" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdealAirSystemAbridged() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdealAirSystemAbridged" /> class.
        /// </summary>
        /// <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
        /// <param name="type">type (default to &quot;IdealAirSystemAbridged&quot;).</param>
        /// <param name="economizerType">Text to indicate the type of air-side economizer used on the ideal air system. Economizers will mix in a greater amount of outdoor air to cool the zone (rather than running the cooling system) when the zone needs cooling and the outdoor air is cooler than the zone. (default to EconomizerTypeEnum.DifferentialDryBulb).</param>
        /// <param name="demandControlVentilation">Boolean to note whether demand controlled ventilation should be used on the system, which will vary the amount of ventilation air according to the occupancy schedule of the zone. (default to false).</param>
        /// <param name="sensibleHeatRecovery">A number between 0 and 1 for the effectiveness of sensible heat recovery within the system. (default to 0).</param>
        /// <param name="latentHeatRecovery">A number between 0 and 1 for the effectiveness of latent heat recovery within the system. (default to 0).</param>
        /// <param name="heatingAirTemperature">A number for the maximum heating supply air temperature [C]. (default to 50).</param>
        /// <param name="coolingAirTemperature">A number for the minimum cooling supply air temperature [C]. (default to 13).</param>
        /// <param name="heatingLimit">A number for the maximum heating capacity in Watts. This can also be the text \&quot;autosize\&quot; to indicate that the capacity should be determined during the EnergyPlus sizing calculation. This can also be the text \&quot;NoLimit\&quot; to indicate no upper limit to the heating capacity. Note that setting this to None will trigger the default (\&quot;autosize\&quot;)..</param>
        /// <param name="coolingLimit">A number for the maximum cooling capacity in Watts. This can also be the text \&quot;autosize\&quot; to indicate that the capacity should be determined during the sizing calculation. This can also be the text \&quot;NoLimit\&quot; to indicate no upper limit to the cooling capacity. Note that setting this to None will trigger the default (\&quot;autosize\&quot;)..</param>
        /// <param name="heatingAvailability">An optional name of a schedule to set the availability of heating over the course of the simulation..</param>
        /// <param name="coolingAvailability">An optional name of a schedule to set the availability of cooling over the course of the simulation..</param>
        public IdealAirSystemAbridged(string name, string type = "IdealAirSystemAbridged", EconomizerTypeEnum? economizerType = EconomizerTypeEnum.DifferentialDryBulb, bool demandControlVentilation = false, double sensibleHeatRecovery = 0, double latentHeatRecovery = 0, double heatingAirTemperature = 50, double coolingAirTemperature = 13, AnyOf<double,string> heatingLimit = default, AnyOf<double,string> coolingLimit = default, string heatingAvailability = default, string coolingAvailability = default)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for IdealAirSystemAbridged and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = "IdealAirSystemAbridged";
            }
            else
            {
                this.Type = type;
            }
            // use default value if no "economizerType" provided
            if (economizerType == null)
            {
                this.EconomizerType = EconomizerTypeEnum.DifferentialDryBulb;
            }
            else
            {
                this.EconomizerType = economizerType;
            }
            // use default value if no "demandControlVentilation" provided
            if (demandControlVentilation == null)
            {
                this.DemandControlVentilation = false;
            }
            else
            {
                this.DemandControlVentilation = demandControlVentilation;
            }
            // use default value if no "sensibleHeatRecovery" provided
            if (sensibleHeatRecovery == null)
            {
                this.SensibleHeatRecovery = 0;
            }
            else
            {
                this.SensibleHeatRecovery = sensibleHeatRecovery;
            }
            // use default value if no "latentHeatRecovery" provided
            if (latentHeatRecovery == null)
            {
                this.LatentHeatRecovery = 0;
            }
            else
            {
                this.LatentHeatRecovery = latentHeatRecovery;
            }
            // use default value if no "heatingAirTemperature" provided
            if (heatingAirTemperature == null)
            {
                this.HeatingAirTemperature = 50;
            }
            else
            {
                this.HeatingAirTemperature = heatingAirTemperature;
            }
            // use default value if no "coolingAirTemperature" provided
            if (coolingAirTemperature == null)
            {
                this.CoolingAirTemperature = 13;
            }
            else
            {
                this.CoolingAirTemperature = coolingAirTemperature;
            }
            this.HeatingLimit = heatingLimit;
            this.CoolingLimit = coolingLimit;
            this.HeatingAvailability = heatingAvailability;
            this.CoolingAvailability = coolingAvailability;
        }
        
        /// <summary>
        /// Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
        /// </summary>
        /// <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        [JsonProperty("type")]
        public string Type { get; set; }


        /// <summary>
        /// Boolean to note whether demand controlled ventilation should be used on the system, which will vary the amount of ventilation air according to the occupancy schedule of the zone.
        /// </summary>
        /// <value>Boolean to note whether demand controlled ventilation should be used on the system, which will vary the amount of ventilation air according to the occupancy schedule of the zone.</value>
        [DataMember(Name="demand_control_ventilation", EmitDefaultValue=false)]
        [JsonProperty("demand_control_ventilation")]
        public bool DemandControlVentilation { get; set; }

        /// <summary>
        /// A number between 0 and 1 for the effectiveness of sensible heat recovery within the system.
        /// </summary>
        /// <value>A number between 0 and 1 for the effectiveness of sensible heat recovery within the system.</value>
        [DataMember(Name="sensible_heat_recovery", EmitDefaultValue=false)]
        [JsonProperty("sensible_heat_recovery")]
        public double SensibleHeatRecovery { get; set; }

        /// <summary>
        /// A number between 0 and 1 for the effectiveness of latent heat recovery within the system.
        /// </summary>
        /// <value>A number between 0 and 1 for the effectiveness of latent heat recovery within the system.</value>
        [DataMember(Name="latent_heat_recovery", EmitDefaultValue=false)]
        [JsonProperty("latent_heat_recovery")]
        public double LatentHeatRecovery { get; set; }

        /// <summary>
        /// A number for the maximum heating supply air temperature [C].
        /// </summary>
        /// <value>A number for the maximum heating supply air temperature [C].</value>
        [DataMember(Name="heating_air_temperature", EmitDefaultValue=false)]
        [JsonProperty("heating_air_temperature")]
        public double HeatingAirTemperature { get; set; }

        /// <summary>
        /// A number for the minimum cooling supply air temperature [C].
        /// </summary>
        /// <value>A number for the minimum cooling supply air temperature [C].</value>
        [DataMember(Name="cooling_air_temperature", EmitDefaultValue=false)]
        [JsonProperty("cooling_air_temperature")]
        public double CoolingAirTemperature { get; set; }

        /// <summary>
        /// A number for the maximum heating capacity in Watts. This can also be the text \&quot;autosize\&quot; to indicate that the capacity should be determined during the EnergyPlus sizing calculation. This can also be the text \&quot;NoLimit\&quot; to indicate no upper limit to the heating capacity. Note that setting this to None will trigger the default (\&quot;autosize\&quot;).
        /// </summary>
        /// <value>A number for the maximum heating capacity in Watts. This can also be the text \&quot;autosize\&quot; to indicate that the capacity should be determined during the EnergyPlus sizing calculation. This can also be the text \&quot;NoLimit\&quot; to indicate no upper limit to the heating capacity. Note that setting this to None will trigger the default (\&quot;autosize\&quot;).</value>
        [DataMember(Name="heating_limit", EmitDefaultValue=false)]
        [JsonProperty("heating_limit")]
        public AnyOf<double,string> HeatingLimit { get; set; }

        /// <summary>
        /// A number for the maximum cooling capacity in Watts. This can also be the text \&quot;autosize\&quot; to indicate that the capacity should be determined during the sizing calculation. This can also be the text \&quot;NoLimit\&quot; to indicate no upper limit to the cooling capacity. Note that setting this to None will trigger the default (\&quot;autosize\&quot;).
        /// </summary>
        /// <value>A number for the maximum cooling capacity in Watts. This can also be the text \&quot;autosize\&quot; to indicate that the capacity should be determined during the sizing calculation. This can also be the text \&quot;NoLimit\&quot; to indicate no upper limit to the cooling capacity. Note that setting this to None will trigger the default (\&quot;autosize\&quot;).</value>
        [DataMember(Name="cooling_limit", EmitDefaultValue=false)]
        [JsonProperty("cooling_limit")]
        public AnyOf<double,string> CoolingLimit { get; set; }

        /// <summary>
        /// An optional name of a schedule to set the availability of heating over the course of the simulation.
        /// </summary>
        /// <value>An optional name of a schedule to set the availability of heating over the course of the simulation.</value>
        [DataMember(Name="heating_availability", EmitDefaultValue=false)]
        [JsonProperty("heating_availability")]
        public string HeatingAvailability { get; set; }

        /// <summary>
        /// An optional name of a schedule to set the availability of cooling over the course of the simulation.
        /// </summary>
        /// <value>An optional name of a schedule to set the availability of cooling over the course of the simulation.</value>
        [DataMember(Name="cooling_availability", EmitDefaultValue=false)]
        [JsonProperty("cooling_availability")]
        public string CoolingAvailability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdealAirSystemAbridged {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  EconomizerType: ").Append(EconomizerType).Append("\n");
            sb.Append("  DemandControlVentilation: ").Append(DemandControlVentilation).Append("\n");
            sb.Append("  SensibleHeatRecovery: ").Append(SensibleHeatRecovery).Append("\n");
            sb.Append("  LatentHeatRecovery: ").Append(LatentHeatRecovery).Append("\n");
            sb.Append("  HeatingAirTemperature: ").Append(HeatingAirTemperature).Append("\n");
            sb.Append("  CoolingAirTemperature: ").Append(CoolingAirTemperature).Append("\n");
            sb.Append("  HeatingLimit: ").Append(HeatingLimit).Append("\n");
            sb.Append("  CoolingLimit: ").Append(CoolingLimit).Append("\n");
            sb.Append("  HeatingAvailability: ").Append(HeatingAvailability).Append("\n");
            sb.Append("  CoolingAvailability: ").Append(CoolingAvailability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, new AnyOfJsonConverter());
        }

        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>IdealAirSystemAbridged object</returns>
        public static IdealAirSystemAbridged FromJson(string json)
        {
            return JsonConvert.DeserializeObject<IdealAirSystemAbridged>(json, new AnyOfJsonConverter());
        }


        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdealAirSystemAbridged);
        }

        /// <summary>
        /// Returns true if IdealAirSystemAbridged instances are equal
        /// </summary>
        /// <param name="input">Instance of IdealAirSystemAbridged to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdealAirSystemAbridged input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.EconomizerType == input.EconomizerType ||
                    (this.EconomizerType != null &&
                    this.EconomizerType.Equals(input.EconomizerType))
                ) && 
                (
                    this.DemandControlVentilation == input.DemandControlVentilation ||
                    (this.DemandControlVentilation != null &&
                    this.DemandControlVentilation.Equals(input.DemandControlVentilation))
                ) && 
                (
                    this.SensibleHeatRecovery == input.SensibleHeatRecovery ||
                    (this.SensibleHeatRecovery != null &&
                    this.SensibleHeatRecovery.Equals(input.SensibleHeatRecovery))
                ) && 
                (
                    this.LatentHeatRecovery == input.LatentHeatRecovery ||
                    (this.LatentHeatRecovery != null &&
                    this.LatentHeatRecovery.Equals(input.LatentHeatRecovery))
                ) && 
                (
                    this.HeatingAirTemperature == input.HeatingAirTemperature ||
                    (this.HeatingAirTemperature != null &&
                    this.HeatingAirTemperature.Equals(input.HeatingAirTemperature))
                ) && 
                (
                    this.CoolingAirTemperature == input.CoolingAirTemperature ||
                    (this.CoolingAirTemperature != null &&
                    this.CoolingAirTemperature.Equals(input.CoolingAirTemperature))
                ) && 
                (
                    this.HeatingLimit == input.HeatingLimit ||
                    (this.HeatingLimit != null &&
                    this.HeatingLimit.Equals(input.HeatingLimit))
                ) && 
                (
                    this.CoolingLimit == input.CoolingLimit ||
                    (this.CoolingLimit != null &&
                    this.CoolingLimit.Equals(input.CoolingLimit))
                ) && 
                (
                    this.HeatingAvailability == input.HeatingAvailability ||
                    (this.HeatingAvailability != null &&
                    this.HeatingAvailability.Equals(input.HeatingAvailability))
                ) && 
                (
                    this.CoolingAvailability == input.CoolingAvailability ||
                    (this.CoolingAvailability != null &&
                    this.CoolingAvailability.Equals(input.CoolingAvailability))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.EconomizerType != null)
                    hashCode = hashCode * 59 + this.EconomizerType.GetHashCode();
                if (this.DemandControlVentilation != null)
                    hashCode = hashCode * 59 + this.DemandControlVentilation.GetHashCode();
                if (this.SensibleHeatRecovery != null)
                    hashCode = hashCode * 59 + this.SensibleHeatRecovery.GetHashCode();
                if (this.LatentHeatRecovery != null)
                    hashCode = hashCode * 59 + this.LatentHeatRecovery.GetHashCode();
                if (this.HeatingAirTemperature != null)
                    hashCode = hashCode * 59 + this.HeatingAirTemperature.GetHashCode();
                if (this.CoolingAirTemperature != null)
                    hashCode = hashCode * 59 + this.CoolingAirTemperature.GetHashCode();
                if (this.HeatingLimit != null)
                    hashCode = hashCode * 59 + this.HeatingLimit.GetHashCode();
                if (this.CoolingLimit != null)
                    hashCode = hashCode * 59 + this.CoolingLimit.GetHashCode();
                if (this.HeatingAvailability != null)
                    hashCode = hashCode * 59 + this.HeatingAvailability.GetHashCode();
                if (this.CoolingAvailability != null)
                    hashCode = hashCode * 59 + this.CoolingAvailability.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Type (string) pattern
            Regex regexType = new Regex(@"^IdealAirSystemAbridged$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            // SensibleHeatRecovery (double) maximum
            if(this.SensibleHeatRecovery > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SensibleHeatRecovery, must be a value less than or equal to 1.", new [] { "SensibleHeatRecovery" });
            }

            // SensibleHeatRecovery (double) minimum
            if(this.SensibleHeatRecovery < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SensibleHeatRecovery, must be a value greater than or equal to 0.", new [] { "SensibleHeatRecovery" });
            }

            // LatentHeatRecovery (double) maximum
            if(this.LatentHeatRecovery > (double)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LatentHeatRecovery, must be a value less than or equal to 1.", new [] { "LatentHeatRecovery" });
            }

            // LatentHeatRecovery (double) minimum
            if(this.LatentHeatRecovery < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LatentHeatRecovery, must be a value greater than or equal to 0.", new [] { "LatentHeatRecovery" });
            }

            // HeatingAvailability (string) maxLength
            if(this.HeatingAvailability != null && this.HeatingAvailability.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HeatingAvailability, length must be less than 100.", new [] { "HeatingAvailability" });
            }

            // HeatingAvailability (string) minLength
            if(this.HeatingAvailability != null && this.HeatingAvailability.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HeatingAvailability, length must be greater than 1.", new [] { "HeatingAvailability" });
            }

            // CoolingAvailability (string) maxLength
            if(this.CoolingAvailability != null && this.CoolingAvailability.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CoolingAvailability, length must be less than 100.", new [] { "CoolingAvailability" });
            }

            // CoolingAvailability (string) minLength
            if(this.CoolingAvailability != null && this.CoolingAvailability.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CoolingAvailability, length must be greater than 1.", new [] { "CoolingAvailability" });
            }

            yield break;
        }
    }

}
