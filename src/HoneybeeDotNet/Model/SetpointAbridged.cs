/* 
 * Honeybee Model Schema
 *
 * This is the documentation for Honeybee model schema.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HoneybeeDotNet.Client.OpenAPIDateConverter;

namespace HoneybeeDotNet.Model
{
    /// <summary>
    /// Used to specify information about the setpoint schedule.
    /// </summary>
    [DataContract]
    public partial class SetpointAbridged :  IEquatable<SetpointAbridged>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetpointAbridged" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetpointAbridged() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetpointAbridged" /> class.
        /// </summary>
        /// <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
        /// <param name="coolingSchedule">Name of the schedule for the cooling setpoint. The values in this schedule should be temperature in [C]. (required).</param>
        /// <param name="heatingSchedule">Name of the schedule for the heating setpoint. The values in this schedule should be temperature in [C]. (required).</param>
        /// <param name="type">type (default to &quot;SetpointAbridged&quot;).</param>
        /// <param name="humidificationSchedule">Name of the schedule for the humidification setpoint. The values in this schedule should be in [%]..</param>
        /// <param name="dehumidificationSchedule">Name of the schedule for the dehumidification setpoint. The values in this schedule should be in [%]..</param>
        public SetpointAbridged(string name, string coolingSchedule, string heatingSchedule, string type = "SetpointAbridged", string humidificationSchedule = default(string), string dehumidificationSchedule = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for SetpointAbridged and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "coolingSchedule" is required (not null)
            if (coolingSchedule == null)
            {
                throw new InvalidDataException("coolingSchedule is a required property for SetpointAbridged and cannot be null");
            }
            else
            {
                this.CoolingSchedule = coolingSchedule;
            }
            
            // to ensure "heatingSchedule" is required (not null)
            if (heatingSchedule == null)
            {
                throw new InvalidDataException("heatingSchedule is a required property for SetpointAbridged and cannot be null");
            }
            else
            {
                this.HeatingSchedule = heatingSchedule;
            }
            
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = "SetpointAbridged";
            }
            else
            {
                this.Type = type;
            }
            this.HumidificationSchedule = humidificationSchedule;
            this.DehumidificationSchedule = dehumidificationSchedule;
        }
        
        /// <summary>
        /// Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
        /// </summary>
        /// <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// Name of the schedule for the cooling setpoint. The values in this schedule should be temperature in [C].
        /// </summary>
        /// <value>Name of the schedule for the cooling setpoint. The values in this schedule should be temperature in [C].</value>
        [DataMember(Name="cooling_schedule", EmitDefaultValue=false)]
        [JsonProperty("cooling_schedule")]
        public string CoolingSchedule { get; set; }

        /// <summary>
        /// Name of the schedule for the heating setpoint. The values in this schedule should be temperature in [C].
        /// </summary>
        /// <value>Name of the schedule for the heating setpoint. The values in this schedule should be temperature in [C].</value>
        [DataMember(Name="heating_schedule", EmitDefaultValue=false)]
        [JsonProperty("heating_schedule")]
        public string HeatingSchedule { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        [JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>
        /// Name of the schedule for the humidification setpoint. The values in this schedule should be in [%].
        /// </summary>
        /// <value>Name of the schedule for the humidification setpoint. The values in this schedule should be in [%].</value>
        [DataMember(Name="humidification_schedule", EmitDefaultValue=false)]
        [JsonProperty("humidification_schedule")]
        public string HumidificationSchedule { get; set; }

        /// <summary>
        /// Name of the schedule for the dehumidification setpoint. The values in this schedule should be in [%].
        /// </summary>
        /// <value>Name of the schedule for the dehumidification setpoint. The values in this schedule should be in [%].</value>
        [DataMember(Name="dehumidification_schedule", EmitDefaultValue=false)]
        [JsonProperty("dehumidification_schedule")]
        public string DehumidificationSchedule { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetpointAbridged {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CoolingSchedule: ").Append(CoolingSchedule).Append("\n");
            sb.Append("  HeatingSchedule: ").Append(HeatingSchedule).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  HumidificationSchedule: ").Append(HumidificationSchedule).Append("\n");
            sb.Append("  DehumidificationSchedule: ").Append(DehumidificationSchedule).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetpointAbridged);
        }

        /// <summary>
        /// Returns true if SetpointAbridged instances are equal
        /// </summary>
        /// <param name="input">Instance of SetpointAbridged to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetpointAbridged input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CoolingSchedule == input.CoolingSchedule ||
                    (this.CoolingSchedule != null &&
                    this.CoolingSchedule.Equals(input.CoolingSchedule))
                ) && 
                (
                    this.HeatingSchedule == input.HeatingSchedule ||
                    (this.HeatingSchedule != null &&
                    this.HeatingSchedule.Equals(input.HeatingSchedule))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.HumidificationSchedule == input.HumidificationSchedule ||
                    (this.HumidificationSchedule != null &&
                    this.HumidificationSchedule.Equals(input.HumidificationSchedule))
                ) && 
                (
                    this.DehumidificationSchedule == input.DehumidificationSchedule ||
                    (this.DehumidificationSchedule != null &&
                    this.DehumidificationSchedule.Equals(input.DehumidificationSchedule))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CoolingSchedule != null)
                    hashCode = hashCode * 59 + this.CoolingSchedule.GetHashCode();
                if (this.HeatingSchedule != null)
                    hashCode = hashCode * 59 + this.HeatingSchedule.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.HumidificationSchedule != null)
                    hashCode = hashCode * 59 + this.HumidificationSchedule.GetHashCode();
                if (this.DehumidificationSchedule != null)
                    hashCode = hashCode * 59 + this.DehumidificationSchedule.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // CoolingSchedule (string) maxLength
            if(this.CoolingSchedule != null && this.CoolingSchedule.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CoolingSchedule, length must be less than 100.", new [] { "CoolingSchedule" });
            }

            // CoolingSchedule (string) minLength
            if(this.CoolingSchedule != null && this.CoolingSchedule.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CoolingSchedule, length must be greater than 1.", new [] { "CoolingSchedule" });
            }

            // HeatingSchedule (string) maxLength
            if(this.HeatingSchedule != null && this.HeatingSchedule.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HeatingSchedule, length must be less than 100.", new [] { "HeatingSchedule" });
            }

            // HeatingSchedule (string) minLength
            if(this.HeatingSchedule != null && this.HeatingSchedule.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HeatingSchedule, length must be greater than 1.", new [] { "HeatingSchedule" });
            }

            // Type (string) pattern
            Regex regexType = new Regex(@"^SetpointAbridged$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            // HumidificationSchedule (string) maxLength
            if(this.HumidificationSchedule != null && this.HumidificationSchedule.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HumidificationSchedule, length must be less than 100.", new [] { "HumidificationSchedule" });
            }

            // HumidificationSchedule (string) minLength
            if(this.HumidificationSchedule != null && this.HumidificationSchedule.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HumidificationSchedule, length must be greater than 1.", new [] { "HumidificationSchedule" });
            }

            // DehumidificationSchedule (string) maxLength
            if(this.DehumidificationSchedule != null && this.DehumidificationSchedule.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DehumidificationSchedule, length must be less than 100.", new [] { "DehumidificationSchedule" });
            }

            // DehumidificationSchedule (string) minLength
            if(this.DehumidificationSchedule != null && this.DehumidificationSchedule.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DehumidificationSchedule, length must be greater than 1.", new [] { "DehumidificationSchedule" });
            }

            yield break;
        }
    }

}
