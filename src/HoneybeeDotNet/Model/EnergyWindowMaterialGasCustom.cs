/* 
 * Honeybee Model Schema
 *
 * This is the documentation for Honeybee model schema.
 *
 * The version of the OpenAPI document: 1.3.0
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = HoneybeeDotNet.Client.OpenAPIDateConverter;

namespace HoneybeeDotNet.Model
{
    /// <summary>
    /// Create single layer of custom gas.
    /// </summary>
    [DataContract]
    public partial class EnergyWindowMaterialGasCustom :  IEquatable<EnergyWindowMaterialGasCustom>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyWindowMaterialGasCustom" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EnergyWindowMaterialGasCustom() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EnergyWindowMaterialGasCustom" /> class.
        /// </summary>
        /// <param name="name">Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters. (required).</param>
        /// <param name="conductivityCoeffA">The A coefficient for gas conductivity in W/(m-K). (required).</param>
        /// <param name="viscosityCoeffA">The A coefficient for gas viscosity in kg/(m-s). (required).</param>
        /// <param name="specificHeatCoeffA">The A coefficient for gas specific heat in J/(kg-K). (required).</param>
        /// <param name="specificHeatRatio">The specific heat ratio for gas. (required).</param>
        /// <param name="molecularWeight">The molecular weight for gas in g/mol. (required).</param>
        /// <param name="type">type (default to &quot;EnergyWindowMaterialGasCustom&quot;).</param>
        /// <param name="thickness">Thickness of the gas layer in meters. Default value is 0.0125. (default to 0.0125M).</param>
        /// <param name="conductivityCoeffB">The B coefficient for gas conductivity in W/(m-K2). (default to 0M).</param>
        /// <param name="conductivityCoeffC">The C coefficient for gas conductivity in W/(m-K3). (default to 0M).</param>
        /// <param name="viscosityCoeffB">The B coefficient for gas viscosity in kg/(m-s-K). (default to 0M).</param>
        /// <param name="viscosityCoeffC">The C coefficient for gas viscosity in kg/(m-s-K2). (default to 0M).</param>
        /// <param name="specificHeatCoeffB">The B coefficient for gas specific heat in J/(kg-K2). (default to 0M).</param>
        /// <param name="specificHeatCoeffC">The C coefficient for gas specific heat in J/(kg-K3). (default to 0M).</param>
        public EnergyWindowMaterialGasCustom(string name, decimal conductivityCoeffA, decimal viscosityCoeffA, decimal specificHeatCoeffA, decimal specificHeatRatio, decimal molecularWeight, string type = "EnergyWindowMaterialGasCustom", decimal thickness = 0.0125M, decimal conductivityCoeffB = 0M, decimal conductivityCoeffC = 0M, decimal viscosityCoeffB = 0M, decimal viscosityCoeffC = 0M, decimal specificHeatCoeffB = 0M, decimal specificHeatCoeffC = 0M)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for EnergyWindowMaterialGasCustom and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "conductivityCoeffA" is required (not null)
            if (conductivityCoeffA == null)
            {
                throw new InvalidDataException("conductivityCoeffA is a required property for EnergyWindowMaterialGasCustom and cannot be null");
            }
            else
            {
                this.ConductivityCoeffA = conductivityCoeffA;
            }
            
            // to ensure "viscosityCoeffA" is required (not null)
            if (viscosityCoeffA == null)
            {
                throw new InvalidDataException("viscosityCoeffA is a required property for EnergyWindowMaterialGasCustom and cannot be null");
            }
            else
            {
                this.ViscosityCoeffA = viscosityCoeffA;
            }
            
            // to ensure "specificHeatCoeffA" is required (not null)
            if (specificHeatCoeffA == null)
            {
                throw new InvalidDataException("specificHeatCoeffA is a required property for EnergyWindowMaterialGasCustom and cannot be null");
            }
            else
            {
                this.SpecificHeatCoeffA = specificHeatCoeffA;
            }
            
            // to ensure "specificHeatRatio" is required (not null)
            if (specificHeatRatio == null)
            {
                throw new InvalidDataException("specificHeatRatio is a required property for EnergyWindowMaterialGasCustom and cannot be null");
            }
            else
            {
                this.SpecificHeatRatio = specificHeatRatio;
            }
            
            // to ensure "molecularWeight" is required (not null)
            if (molecularWeight == null)
            {
                throw new InvalidDataException("molecularWeight is a required property for EnergyWindowMaterialGasCustom and cannot be null");
            }
            else
            {
                this.MolecularWeight = molecularWeight;
            }
            
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = "EnergyWindowMaterialGasCustom";
            }
            else
            {
                this.Type = type;
            }
            // use default value if no "thickness" provided
            if (thickness == null)
            {
                this.Thickness = 0.0125M;
            }
            else
            {
                this.Thickness = thickness;
            }
            // use default value if no "conductivityCoeffB" provided
            if (conductivityCoeffB == null)
            {
                this.ConductivityCoeffB = 0M;
            }
            else
            {
                this.ConductivityCoeffB = conductivityCoeffB;
            }
            // use default value if no "conductivityCoeffC" provided
            if (conductivityCoeffC == null)
            {
                this.ConductivityCoeffC = 0M;
            }
            else
            {
                this.ConductivityCoeffC = conductivityCoeffC;
            }
            // use default value if no "viscosityCoeffB" provided
            if (viscosityCoeffB == null)
            {
                this.ViscosityCoeffB = 0M;
            }
            else
            {
                this.ViscosityCoeffB = viscosityCoeffB;
            }
            // use default value if no "viscosityCoeffC" provided
            if (viscosityCoeffC == null)
            {
                this.ViscosityCoeffC = 0M;
            }
            else
            {
                this.ViscosityCoeffC = viscosityCoeffC;
            }
            // use default value if no "specificHeatCoeffB" provided
            if (specificHeatCoeffB == null)
            {
                this.SpecificHeatCoeffB = 0M;
            }
            else
            {
                this.SpecificHeatCoeffB = specificHeatCoeffB;
            }
            // use default value if no "specificHeatCoeffC" provided
            if (specificHeatCoeffC == null)
            {
                this.SpecificHeatCoeffC = 0M;
            }
            else
            {
                this.SpecificHeatCoeffC = specificHeatCoeffC;
            }
        }
        
        /// <summary>
        /// Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.
        /// </summary>
        /// <value>Name of the object. Must use only ASCII characters and exclude (, ; ! \\n \\t). It cannot be longer than 100 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>
        /// The A coefficient for gas conductivity in W/(m-K).
        /// </summary>
        /// <value>The A coefficient for gas conductivity in W/(m-K).</value>
        [DataMember(Name="conductivity_coeff_a", EmitDefaultValue=false)]
        [JsonProperty("conductivity_coeff_a")]
        public decimal ConductivityCoeffA { get; set; }

        /// <summary>
        /// The A coefficient for gas viscosity in kg/(m-s).
        /// </summary>
        /// <value>The A coefficient for gas viscosity in kg/(m-s).</value>
        [DataMember(Name="viscosity_coeff_a", EmitDefaultValue=false)]
        [JsonProperty("viscosity_coeff_a")]
        public decimal ViscosityCoeffA { get; set; }

        /// <summary>
        /// The A coefficient for gas specific heat in J/(kg-K).
        /// </summary>
        /// <value>The A coefficient for gas specific heat in J/(kg-K).</value>
        [DataMember(Name="specific_heat_coeff_a", EmitDefaultValue=false)]
        [JsonProperty("specific_heat_coeff_a")]
        public decimal SpecificHeatCoeffA { get; set; }

        /// <summary>
        /// The specific heat ratio for gas.
        /// </summary>
        /// <value>The specific heat ratio for gas.</value>
        [DataMember(Name="specific_heat_ratio", EmitDefaultValue=false)]
        [JsonProperty("specific_heat_ratio")]
        public decimal SpecificHeatRatio { get; set; }

        /// <summary>
        /// The molecular weight for gas in g/mol.
        /// </summary>
        /// <value>The molecular weight for gas in g/mol.</value>
        [DataMember(Name="molecular_weight", EmitDefaultValue=false)]
        [JsonProperty("molecular_weight")]
        public decimal MolecularWeight { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        [JsonProperty("type")]
        public string Type { get; set; }

        /// <summary>
        /// Thickness of the gas layer in meters. Default value is 0.0125.
        /// </summary>
        /// <value>Thickness of the gas layer in meters. Default value is 0.0125.</value>
        [DataMember(Name="thickness", EmitDefaultValue=false)]
        [JsonProperty("thickness")]
        public decimal Thickness { get; set; }

        /// <summary>
        /// The B coefficient for gas conductivity in W/(m-K2).
        /// </summary>
        /// <value>The B coefficient for gas conductivity in W/(m-K2).</value>
        [DataMember(Name="conductivity_coeff_b", EmitDefaultValue=false)]
        [JsonProperty("conductivity_coeff_b")]
        public decimal ConductivityCoeffB { get; set; }

        /// <summary>
        /// The C coefficient for gas conductivity in W/(m-K3).
        /// </summary>
        /// <value>The C coefficient for gas conductivity in W/(m-K3).</value>
        [DataMember(Name="conductivity_coeff_c", EmitDefaultValue=false)]
        [JsonProperty("conductivity_coeff_c")]
        public decimal ConductivityCoeffC { get; set; }

        /// <summary>
        /// The B coefficient for gas viscosity in kg/(m-s-K).
        /// </summary>
        /// <value>The B coefficient for gas viscosity in kg/(m-s-K).</value>
        [DataMember(Name="viscosity_coeff_b", EmitDefaultValue=false)]
        [JsonProperty("viscosity_coeff_b")]
        public decimal ViscosityCoeffB { get; set; }

        /// <summary>
        /// The C coefficient for gas viscosity in kg/(m-s-K2).
        /// </summary>
        /// <value>The C coefficient for gas viscosity in kg/(m-s-K2).</value>
        [DataMember(Name="viscosity_coeff_c", EmitDefaultValue=false)]
        [JsonProperty("viscosity_coeff_c")]
        public decimal ViscosityCoeffC { get; set; }

        /// <summary>
        /// The B coefficient for gas specific heat in J/(kg-K2).
        /// </summary>
        /// <value>The B coefficient for gas specific heat in J/(kg-K2).</value>
        [DataMember(Name="specific_heat_coeff_b", EmitDefaultValue=false)]
        [JsonProperty("specific_heat_coeff_b")]
        public decimal SpecificHeatCoeffB { get; set; }

        /// <summary>
        /// The C coefficient for gas specific heat in J/(kg-K3).
        /// </summary>
        /// <value>The C coefficient for gas specific heat in J/(kg-K3).</value>
        [DataMember(Name="specific_heat_coeff_c", EmitDefaultValue=false)]
        [JsonProperty("specific_heat_coeff_c")]
        public decimal SpecificHeatCoeffC { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnergyWindowMaterialGasCustom {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ConductivityCoeffA: ").Append(ConductivityCoeffA).Append("\n");
            sb.Append("  ViscosityCoeffA: ").Append(ViscosityCoeffA).Append("\n");
            sb.Append("  SpecificHeatCoeffA: ").Append(SpecificHeatCoeffA).Append("\n");
            sb.Append("  SpecificHeatRatio: ").Append(SpecificHeatRatio).Append("\n");
            sb.Append("  MolecularWeight: ").Append(MolecularWeight).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Thickness: ").Append(Thickness).Append("\n");
            sb.Append("  ConductivityCoeffB: ").Append(ConductivityCoeffB).Append("\n");
            sb.Append("  ConductivityCoeffC: ").Append(ConductivityCoeffC).Append("\n");
            sb.Append("  ViscosityCoeffB: ").Append(ViscosityCoeffB).Append("\n");
            sb.Append("  ViscosityCoeffC: ").Append(ViscosityCoeffC).Append("\n");
            sb.Append("  SpecificHeatCoeffB: ").Append(SpecificHeatCoeffB).Append("\n");
            sb.Append("  SpecificHeatCoeffC: ").Append(SpecificHeatCoeffC).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented, new AnyOfJsonConverter());
        }

        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>EnergyWindowMaterialGasCustom object</returns>
        public static EnergyWindowMaterialGasCustom FromJson(string json)
        {
            return JsonConvert.DeserializeObject<EnergyWindowMaterialGasCustom>(json, new AnyOfJsonConverter());
        }


        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnergyWindowMaterialGasCustom);
        }

        /// <summary>
        /// Returns true if EnergyWindowMaterialGasCustom instances are equal
        /// </summary>
        /// <param name="input">Instance of EnergyWindowMaterialGasCustom to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnergyWindowMaterialGasCustom input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ConductivityCoeffA == input.ConductivityCoeffA ||
                    (this.ConductivityCoeffA != null &&
                    this.ConductivityCoeffA.Equals(input.ConductivityCoeffA))
                ) && 
                (
                    this.ViscosityCoeffA == input.ViscosityCoeffA ||
                    (this.ViscosityCoeffA != null &&
                    this.ViscosityCoeffA.Equals(input.ViscosityCoeffA))
                ) && 
                (
                    this.SpecificHeatCoeffA == input.SpecificHeatCoeffA ||
                    (this.SpecificHeatCoeffA != null &&
                    this.SpecificHeatCoeffA.Equals(input.SpecificHeatCoeffA))
                ) && 
                (
                    this.SpecificHeatRatio == input.SpecificHeatRatio ||
                    (this.SpecificHeatRatio != null &&
                    this.SpecificHeatRatio.Equals(input.SpecificHeatRatio))
                ) && 
                (
                    this.MolecularWeight == input.MolecularWeight ||
                    (this.MolecularWeight != null &&
                    this.MolecularWeight.Equals(input.MolecularWeight))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Thickness == input.Thickness ||
                    (this.Thickness != null &&
                    this.Thickness.Equals(input.Thickness))
                ) && 
                (
                    this.ConductivityCoeffB == input.ConductivityCoeffB ||
                    (this.ConductivityCoeffB != null &&
                    this.ConductivityCoeffB.Equals(input.ConductivityCoeffB))
                ) && 
                (
                    this.ConductivityCoeffC == input.ConductivityCoeffC ||
                    (this.ConductivityCoeffC != null &&
                    this.ConductivityCoeffC.Equals(input.ConductivityCoeffC))
                ) && 
                (
                    this.ViscosityCoeffB == input.ViscosityCoeffB ||
                    (this.ViscosityCoeffB != null &&
                    this.ViscosityCoeffB.Equals(input.ViscosityCoeffB))
                ) && 
                (
                    this.ViscosityCoeffC == input.ViscosityCoeffC ||
                    (this.ViscosityCoeffC != null &&
                    this.ViscosityCoeffC.Equals(input.ViscosityCoeffC))
                ) && 
                (
                    this.SpecificHeatCoeffB == input.SpecificHeatCoeffB ||
                    (this.SpecificHeatCoeffB != null &&
                    this.SpecificHeatCoeffB.Equals(input.SpecificHeatCoeffB))
                ) && 
                (
                    this.SpecificHeatCoeffC == input.SpecificHeatCoeffC ||
                    (this.SpecificHeatCoeffC != null &&
                    this.SpecificHeatCoeffC.Equals(input.SpecificHeatCoeffC))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ConductivityCoeffA != null)
                    hashCode = hashCode * 59 + this.ConductivityCoeffA.GetHashCode();
                if (this.ViscosityCoeffA != null)
                    hashCode = hashCode * 59 + this.ViscosityCoeffA.GetHashCode();
                if (this.SpecificHeatCoeffA != null)
                    hashCode = hashCode * 59 + this.SpecificHeatCoeffA.GetHashCode();
                if (this.SpecificHeatRatio != null)
                    hashCode = hashCode * 59 + this.SpecificHeatRatio.GetHashCode();
                if (this.MolecularWeight != null)
                    hashCode = hashCode * 59 + this.MolecularWeight.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Thickness != null)
                    hashCode = hashCode * 59 + this.Thickness.GetHashCode();
                if (this.ConductivityCoeffB != null)
                    hashCode = hashCode * 59 + this.ConductivityCoeffB.GetHashCode();
                if (this.ConductivityCoeffC != null)
                    hashCode = hashCode * 59 + this.ConductivityCoeffC.GetHashCode();
                if (this.ViscosityCoeffB != null)
                    hashCode = hashCode * 59 + this.ViscosityCoeffB.GetHashCode();
                if (this.ViscosityCoeffC != null)
                    hashCode = hashCode * 59 + this.ViscosityCoeffC.GetHashCode();
                if (this.SpecificHeatCoeffB != null)
                    hashCode = hashCode * 59 + this.SpecificHeatCoeffB.GetHashCode();
                if (this.SpecificHeatCoeffC != null)
                    hashCode = hashCode * 59 + this.SpecificHeatCoeffC.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if(this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // MolecularWeight (decimal) maximum
            if(this.MolecularWeight > (decimal)200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MolecularWeight, must be a value less than or equal to 200.", new [] { "MolecularWeight" });
            }

            // MolecularWeight (decimal) minimum
            if(this.MolecularWeight < (decimal)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MolecularWeight, must be a value greater than or equal to 20.", new [] { "MolecularWeight" });
            }

            // Type (string) pattern
            Regex regexType = new Regex(@"^EnergyWindowMaterialGasCustom$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }

}
