/* 
 * {{ NameSpaceName }}
 *
 * Contact: info@ladybug.tools
 */

extern alias LBTNewtonSoft;
//using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using LBTNewtonSoft::Newtonsoft.Json;
using LBTNewtonSoft::Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
{% if HasCsImports -%}
{% for Import in CsImports -%}
using { {{ Import }} };
{% endfor -%}
{% endif -%}

namespace {{ NameSpaceName }}
{
	{%- if HasDescription -%}
    /// <summary>
    /// {{ Description }}
    /// </summary>
	{%- endif -%}
    [Summary(@"{{ Description }}")]
    [System.Serializable]
    [DataContract(Name = "{{ ClassName }}")]
    public partial class {{ CsClassName }} :{% if HasInheritance %} {{ Inheritance }},{% endif %} System.IEquatable<{{ CsClassName }}>
    {
    {%- if hasOnlyReadOnly == false -%}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{CsClassName}}" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected {{CsClassName}}() 
        { 
            // Set readonly properties with defaultValue
        {%-  for property in AllProperties -%}
		    {%- if property.IsReadOnly -%}{%- if property.HasDefault -%}
            this.{{ property.CsPropertyName }} = {% if property.HasVeryLongDefault %}{{ property.CsPropertyName }}Default{% else %}{{ property.DefaultCodeFormat }}{% endif %};
            {%- endif -%}{%- endif -%}
        {%- endfor -%}
        }
    {%- endif -%}
        /// <summary>
        /// Initializes a new instance of the <see cref="{{ CsClassName }}" /> class.
        /// </summary>
	{%-  for property in AllProperties -%}
        {%- if property.IsReadOnly == false -%}
        /// <param name="{{ property.CsParameterName }}">{{ property.Description }}</param>
        {%- endif -%}
    {%- endfor -%}
    {%- if hasOnlyReadOnly -%}
        [JsonConstructorAttribute]
    {%- endif -%}
        public {{ CsClassName }}
        (
            {% assign skipComma = true -%}{% for property in AllProperties -%}{% if property.IsReadOnly == false %}{% if skipComma %}{% assign skipComma = false %}{% else %}, {% endif %}{{ property.ConstructionParameterCode }}{% endif %}{%- endfor %}
        ){%  if HasInheritance %} : base({% assign skipComma = true %}{% for property in ParentProperties -%}{% if property.IsReadOnly == false %}{% if skipComma %}{% assign skipComma = false %}{% else %}, {% endif %}{{ property.CsParameterName }}: {{ property.CsParameterName }}{% endif %}{%- endfor %}){% endif %}
        {
		{%-  for property in Properties -%}
        {%- if property.IsReadOnly == false -%}
            {%- if property.IsValueType -%}
            this.{{ property.CsPropertyName }} = {{ property.CsParameterName }};
            {%- else -%}
            this.{{ property.CsPropertyName }} = {{ property.CsParameterName }}{% if property.HasDefault %} ?? {% if property.HasVeryLongDefault %}{{ property.CsPropertyName }}Default{% else %}{{ property.DefaultCodeFormat }}{% endif %}{% elsif property.IsRequired %} ?? throw new System.ArgumentNullException("{{ property.CsParameterName }} is a required property for {{ CsClassName }} and cannot be null"){%- endif -%};
            {%- endif -%}
        {%- endif -%}
		{%- endfor -%}

            // Set readonly properties with defaultValue
		{%-  for property in AllProperties -%}
		    {%- if property.IsReadOnly and property.HasDefault -%}
            this.{{ property.CsPropertyName }} = {% if property.HasVeryLongDefault %}{{ property.CsPropertyName }}Default{% else %}{{ property.DefaultCodeFormat }}{% endif %};
            {%- endif -%}
		{%- endfor -%}

            // check if object is valid, only check for inherited class
            if (this.GetType() == typeof({{ CsClassName }}))
                this.IsValid(throwException: true);
        }

	
	{%  for property in Properties %}
        {%- if property.HasVeryLongDefault -%}
        public static readonly {{ property.Type }} {{ property.CsPropertyName }}Default = {{ property.DefaultCodeFormat }};
        {%- endif -%}
        /// <summary>
        /// {{ property.Description }}
        /// </summary>
        [Summary(@"{{ property.Description }}")]{% if property.IsRequired %}
        [Required]{% endif %}{% if property.HasPattern %}
        [RegularExpression(@"{{ property.Pattern }}")]{% endif %}{% if property.HasMaximum or property.HasMinimum %}
        [Range({% if property.HasMinimum %}{{ property.Minimum }}{% else %}{{ property.Type }}.MinValue{% endif %}, {% if property.HasMaximum %}{{ property.Maximum }}{% else %}{{ property.Type }}.MaxValue{% endif %})]{% endif %}{% if property.HasMinLength %}
        [MinLength({{ property.MinLength }})]{% endif %}{% if property.HasMaxLength %}
        [MaxLength({{ property.MaxLength }})]{% endif %}
        [DataMember(Name = "{{ property.PropertyName }}"{% if property.IsRequired %}, IsRequired = true{% endif %})]
        public {{ property.Type }} {{ property.CsPropertyName }} { get;{% if property.IsReadOnly %} protected{% endif %} set; }{% if property.HasDefault %} = {% if property.HasVeryLongDefault %}{{ property.CsPropertyName }}Default{% else %}{{ property.DefaultCodeFormat }}{% endif %};{% endif %}
	{%- endfor -%}


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "{{ CsClassName }}";
        }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public {% if HasInheritance %}override{% else %}virtual{% endif %} string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("{{ CsClassName }}:\n");
            {%-  for property in AllProperties -%}
            sb.Append("  {{ property.CsPropertyName }}: ").Append(this.{{ property.CsPropertyName }}).Append("\n");
            {%- endfor -%}
            return sb.ToString();
        }


        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>{{ CsClassName }} object</returns>
        public static {{ CsClassName }} FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<{{ CsClassName }}>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() && obj.IsValid(throwException: true) ? obj : null;
        }


        {%- if HasInheritance  == false -%} 
        public virtual string ToJson(bool indented = false)
        {
            var format = indented ? Formatting.Indented : Formatting.None;
            return JsonConvert.SerializeObject(this, format, JsonSetting.AnyOfConvertSetting);
        }
        {%- endif -%}


        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>{{ CsClassName }} object</returns>
        public virtual {{ CsClassName }} Duplicate{{ CsClassName }}()
        {
            return FromJson(this.ToJson());
        }


        {%- if HasInheritance -%} 
        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>{{ Inheritance }}</returns>
        public override {{ Inheritance }} Duplicate{{ Inheritance }}()
        {
            return Duplicate{{ CsClassName }}();
        }
        {%- else -%}
        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>{{ CsClassName }}</returns>
        public {{ CsClassName }} Duplicate()
        {
            return Duplicate{{ CsClassName }}();
        }
        {%- endif -%}


        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            input = input is AnyOf anyOf ? anyOf.Obj : input;
            return this.Equals(input as {{ CsClassName }});
        }


        /// <summary>
        /// Returns true if {{ CsClassName }} instances are equal
        /// </summary>
        /// <param name="input">Instance of {{ CsClassName }} to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals({{ CsClassName }} input)
        {
            if (input == null)
                return false;
            return {% if HasInheritance == false %}true{% else %}base.Equals(input){% endif %}{%- assign skipComma = true -%}{% for property in Properties %} && 
                    Extension.{%- if property.IsArray -%}AllEquals{% else %}Equals{% endif %}(this.{{ property.CsPropertyName }}, input.{{ property.CsPropertyName }}) {%- endfor -%};
        }


        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = {% if HasInheritance %}base.GetHashCode(){% else %}41{% endif %};
                {%-  for property in Properties -%}
                if (this.{{ property.CsPropertyName }} != null)
                    hashCode = hashCode * 59 + this.{{ property.CsPropertyName }}.GetHashCode();
                {%- endfor -%}
                return hashCode;
            }
        }

    {%- if HasInheritance == false -%} 
        public static bool operator ==({{ CsClassName }} left, {{ CsClassName }} right)
        {
            if (left is null)
            {
                if (right is null)
                {
                    return true;
                }

                // Only the left side is null.
                return false;
            }
            // Equals handles case of null on right side.
            return object.Equals(left, right);
        }

        public static bool operator !=({{ CsClassName }} left, {{ CsClassName }} right)
        {
            return !(left == right);
        }

        public bool IsValid(bool throwException = false)
        {
            var res = this.Validate();
            var isValid = !res.Any();
            if (isValid)
                return true;

            var resMsgs = string.Join( "; ", res.Select(_ => _.ErrorMessage));
            if (throwException)
                throw new System.ArgumentException($"This is an invalid {this.Type} object! Error: {resMsgs}");
            else
                return false;
        }

        public IEnumerable<ValidationResult> Validate()
        {
            var vResults = new List<ValidationResult>();

            var vc = new ValidationContext(instance: this, serviceProvider: null, items: null);
            var isValid = Validator.TryValidateObject(instance: vc.ObjectInstance, validationContext: vc, validationResults: vResults, validateAllProperties: true);
            if (!isValid)
            {
                foreach (var validationResult in vResults)
                {
                    // skip Type
                    if (validationResult.MemberNames.Contains("Type") && validationResult.ErrorMessage.StartsWith("Invalid value for Type, must match a pattern of"))
                        continue;
                    yield return validationResult;
                }
            }

            yield break;
        }
    {%- endif -%}

    }
}
