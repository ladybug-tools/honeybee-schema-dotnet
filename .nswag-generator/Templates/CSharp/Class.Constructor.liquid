{%- assign skipComma = true %}
{% if HasInheritance %}
{%- assign parentProperties = BaseClass.AllProperties %}
{% else %}
{%- assign parentProperties = "" | empty %}
{% endif %}

{%- assign sortedProperties = Properties | sort: "IsRequired" | reverse %}
{%- assign sortedParentProperties = parentProperties | sort: "Name" %}
{%- assign ccName = ClassName %}

    [Newtonsoft.Json.JsonConstructor]
protected {{ClassName}}() { }

{% if IsAbstract %}protected{% else %}public{% endif %} {{ClassName}}({% for property in sortedProperties %}{%- if skipComma %}{%- assign skipComma = false %}{% else %},{% endif %}
    {{ property.Type }} @{{ property.Name | lowercamelcase }}{%- if property.HasDefaultValue %} = {{ property.DefaultValue }}{% elsif property.IsRequired == false %} = default{%- endif %}{% endfor %})
{%- assign skipComma = true %}
{%- if HasInheritance %}
    : base({%- for property in sortedParentProperties %}{%- if skipComma %}{%- assign skipComma = false %}{% else %}, {% endif %}{{ property.Name | lowercamelcase }}{%- endfor %})
{%- endif %}
{
{%- for property in Properties %}
    this.{{property.PropertyName}} = @{{property.Name | lowercamelcase}}{% if property.RenderRequiredAttribute and property.IsStringEnum == false%} ?? throw new System.ArgumentNullException("@{{property.Name | lowercamelcase}} is a required property for {{ccName}} and cannot be null"){%- endif %};
{%- endfor %}
}